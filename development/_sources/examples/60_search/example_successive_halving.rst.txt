
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_successive_halving.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_successive_halving.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_successive_halving.py:


==================
Successive Halving
==================

This advanced  example illustrates how to interact with
the SMAC callback and get relevant information from the run, like
the number of iterations. Particularly, it exemplifies how to select
the intensification strategy to use in smac, in this case:
`SuccessiveHalving <http://proceedings.mlr.press/v80/falkner18a/falkner18a-supp.pdf>`_.

This results in an adaptation of the `BOHB algorithm <http://proceedings.mlr.press/v80/falkner18a/falkner18a.pdf>`_.
It uses Successive Halving instead of `Hyperband <https://jmlr.org/papers/volume18/16-558/16-558.pdf>`_, and could be abbreviated as BOSH.
To get the BOHB algorithm, simply import Hyperband and use it as the intensification strategy.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Define a callback that instantiates SuccessiveHalving
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 29-84

.. code-block:: default



    def get_smac_object_callback(budget_type):
        def get_smac_object(
            scenario_dict,
            seed,
            ta,
            ta_kwargs,
            metalearning_configurations,
            n_jobs,
            dask_client,
        ):
            from smac.facade.smac_ac_facade import SMAC4AC
            from smac.intensification.successive_halving import SuccessiveHalving
            from smac.runhistory.runhistory2epm import RunHistory2EPM4LogCost
            from smac.scenario.scenario import Scenario

            if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
                raise ValueError(
                    "Please make sure to guard the code invoking Auto-sklearn by "
                    "`if __name__ == '__main__'` and remove this exception."
                )

            scenario = Scenario(scenario_dict)
            if len(metalearning_configurations) > 0:
                default_config = scenario.cs.get_default_configuration()
                initial_configurations = [default_config] + metalearning_configurations
            else:
                initial_configurations = None
            rh2EPM = RunHistory2EPM4LogCost

            ta_kwargs["budget_type"] = budget_type

            return SMAC4AC(
                scenario=scenario,
                rng=seed,
                runhistory2epm=rh2EPM,
                tae_runner=ta,
                tae_runner_kwargs=ta_kwargs,
                initial_configurations=initial_configurations,
                run_id=seed,
                intensifier=SuccessiveHalving,
                intensifier_kwargs={
                    "initial_budget": 10.0,
                    "max_budget": 100,
                    "eta": 2,
                    "min_chall": 1,
                },
                n_jobs=n_jobs,
                dask_client=dask_client,
            )

        return get_smac_object









.. GENERATED FROM PYTHON SOURCE LINES 85-87

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 94-96

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 96-128

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e2e7310>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7fc77910>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e337280>,
               'model_id': 2,
               'rank': 4,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e4000a0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e91ae80>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e400310>,
               'model_id': 3,
               'rank': 7,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf780c54c0>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70ff0d30>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf780c5340>,
               'model_id': 4,
               'rank': 17,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e1c0940>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d3afa00>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7bd0f7c0>,
               'model_id': 5,
               'rank': 8,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7807a4f0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d9ad8e0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7807a040>,
               'model_id': 6,
               'rank': 9,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf780b9e80>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f90d9d0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf780b9dc0>,
               'model_id': 7,
               'rank': 12,
               'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7fc77490>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a0a370>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7fc777c0>,
               'model_id': 8,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7dcfddc0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a15280>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7dcfd640>,
               'model_id': 9,
               'rank': 6,
               'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c243e50>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7df44f70>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c243d90>,
                'model_id': 10,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=5.027708640006448e-08,
                                   learning_rate=0.09750328007832798, max_iter=64,
                                   max_leaf_nodes=1234, min_samples_leaf=25,
                                   n_iter_no_change=1, random_state=1,
                                   validation_fraction=0.08300813783286698,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7d680610>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e7a4b20>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d680550>,
                'model_id': 11,
                'rank': 11,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0945814167023392e-10,
                                   learning_rate=0.11042628136263043, max_iter=128,
                                   max_leaf_nodes=30, min_samples_leaf=22,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf783e0550>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf709ea730>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf783e0460>,
                'model_id': 13,
                'rank': 13,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.506856350040198e-06,
                                   learning_rate=0.04634380160611007, max_iter=64,
                                   max_leaf_nodes=11, min_samples_leaf=41,
                                   n_iter_no_change=17, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70b0a520>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70c4fac0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70b0a400>,
                'model_id': 14,
                'rank': 14,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=3, min_samples_leaf=2,
                         min_samples_split=3, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70e831c0>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf78094670>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70e83040>,
                'model_id': 15,
                'rank': 15,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=0.0005657707133726288,
                                   learning_rate=0.09546265146045475, max_iter=64,
                                   max_leaf_nodes=109, min_samples_leaf=2,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c21f820>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d0d1220>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c21f700>,
                'model_id': 16,
                'rank': 16,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=12,
                           min_samples_leaf=15, min_samples_split=6,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf709f1ca0>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf787bd430>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf709f1b20>,
                'model_id': 17,
                'rank': 18,
                'sklearn_classifier': SGDClassifier(alpha=9.410144741041167e-05, average=True,
                  eta0=0.0018055343233337954, learning_rate='constant', loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=0.05082904256838701, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 20
      Number of successful target algorithm runs: 20
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 129-131

We can also use cross-validation with successive halving
========================================================

.. GENERATED FROM PYTHON SOURCE LINES 131-166

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_01",
        disable_evaluator_output=False,
        resampling_strategy="cv",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'cost': 0.046948356807511755,
               'ensemble_weight': 0.04,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c1b02e0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e1c01f0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c1b00a0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c764640>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70cedca0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c764580>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7cf79580>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf784c2eb0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7cf79490>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7890f430>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf784822e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7890f370>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7bb39490>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bed7340>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7bb393d0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 2,
               'rank': 5,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        3: {   'cost': 0.05164319248826292,
               'ensemble_weight': 0.06,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c764d90>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7fafc6d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c764b80>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c9f8a30>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf78392b80>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7ca11040>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf786bb430>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c899850>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf786bb370>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7d677490>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f221340>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d6773d0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c9274f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70aac3a0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c927430>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)}],
               'model_id': 3,
               'rank': 7,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        4: {   'cost': 0.08215962441314555,
               'ensemble_weight': 0.3,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf78702be0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c973b80>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf78702760>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7fafcfa0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7ce879d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7f4e5520>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70ee0730>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf78777d60>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70ee0670>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7d66efa0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf785490d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d66eee0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7ced5a90>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70aa6970>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7ced59d0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)}],
               'model_id': 4,
               'rank': 8,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        5: {   'cost': 0.035211267605633804,
               'ensemble_weight': 0.04,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7bd0f9d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7de28b50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7bd0f670>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf785cb400>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f188790>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf785cbd00>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c739790>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a31ee0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c7396d0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf783d7670>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70fee5b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf783d75b0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c1fc700>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c247640>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c1fc640>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)}],
               'model_id': 5,
               'rank': 2,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        6: {   'cost': 0.04694835680751174,
               'ensemble_weight': 0.06,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7859da90>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a3e8b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e01e8e0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7884a610>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bdbbe20>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7884a550>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c857070>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bebb100>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d6fff70>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7ce83f70>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7cdd7e50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7ce83eb0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7bb820a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7cfa4f40>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7bb89fa0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)}],
               'model_id': 6,
               'rank': 6,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        7: {   'cost': 0.035211267605633784,
               'ensemble_weight': 0.14,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7dd3cc10>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf83b58be0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7dd3ca30>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c1df820>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a3af40>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c1df6a0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7be63ee0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c247cd0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7be63e20>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf78329160>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7caadfd0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf783290a0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7cc14910>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70fac7c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7cc14850>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)}],
               'model_id': 7,
               'rank': 3,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        8: {   'cost': 0.039906103286385,
               'ensemble_weight': 0.2,
               'estimators': [   {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7d0d4670>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7fd0d160>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d0d48b0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf78329370>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e01ed90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf783292b0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70cd1490>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf781458e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70cd13d0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf785fa4c0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf782a8370>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf785fa400>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7820e520>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf784c23d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7820e460>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 8,
               'rank': 4,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        9: {   'cost': 0.028169014084507022,
               'ensemble_weight': 0.16,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7fd0df40>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f37c5b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7fd0dc70>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7d074c10>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c179850>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7d074cd0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e166f40>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e670160>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e1668b0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf80081f10>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7c9c0a30>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf80081790>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70a10820>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70d4f730>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70a10760>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)}],
               'model_id': 9,
               'rank': 1,
               'voting_model': VotingClassifier(estimators=None, voting='soft')}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971831
      Number of target algorithm runs: 9
      Number of successful target algorithm runs: 8
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.965034965034965




.. GENERATED FROM PYTHON SOURCE LINES 167-169

Use an iterative fit cross-validation with successive halving
=============================================================

.. GENERATED FROM PYTHON SOURCE LINES 169-204

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_cv_02",
        disable_evaluator_output=False,
        resampling_strategy="cv-iterative-fit",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf785cb700>,
               'cost': 0.046948356807511755,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f0fd820>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf785cb1c0>,
               'model_id': 2,
               'rank': 2,
               'sklearn_classifier': None},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7fc97400>,
               'cost': 0.05164319248826292,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7fce5d90>,
               'ensemble_weight': 0.34,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7edf55e0>,
               'model_id': 3,
               'rank': 3,
               'sklearn_classifier': None},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7fd0d5e0>,
               'cost': 0.11267605633802817,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e008910>,
               'ensemble_weight': 0.34,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7fd0d490>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': None},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7ea5c910>,
               'cost': 0.035211267605633804,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7f0fd430>,
               'ensemble_weight': 0.2,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7ea5c2b0>,
               'model_id': 5,
               'rank': 1,
               'sklearn_classifier': None}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.964789
      Number of target algorithm runs: 5
      Number of successful target algorithm runs: 5
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 205-207

Next, we see the use of subsampling as a budget in Auto-sklearn
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 207-235

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_03",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        get_smac_object_callback=get_smac_object_callback("subsample"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e6702e0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7ce87280>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e670eb0>,
               'model_id': 2,
               'rank': 6,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e7a4a60>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bad0490>,
               'ensemble_weight': 0.28,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7e7a4730>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0001363185819149026, beta_1=0.999,
                  beta_2=0.9, early_stopping=True,
                  hidden_layer_sizes=(115, 115, 115),
                  learning_rate_init=0.00018009776276177523, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7807a1c0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a08100>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf782a8d30>,
               'model_id': 5,
               'rank': 9,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf70aef5e0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf78142970>,
               'ensemble_weight': 0.3,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70aef100>,
               'model_id': 6,
               'rank': 3,
               'sklearn_classifier': MLPClassifier(alpha=0.0017940473175767063, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(101, 101),
                  learning_rate_init=0.0004684917334431039, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7cfd54f0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d9ad730>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7cfd5c10>,
               'model_id': 7,
               'rank': 7,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf781454c0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7be7ad00>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70a0abb0>,
               'model_id': 8,
               'rank': 8,
               'sklearn_classifier': RandomForestClassifier(max_features=3, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.978723
      Number of target algorithm runs: 12
      Number of successful target algorithm runs: 11
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 236-240

Mixed budget approach
=====================
Finally, there's a mixed budget type which uses iterations where possible and
subsamples otherwise

.. GENERATED FROM PYTHON SOURCE LINES 240-270

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_04",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": ["extra_trees", "gradient_boosting", "random_forest", "sgd"]
        },
        get_smac_object_callback=get_smac_object_callback("mixed"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf785cbdc0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bd0c220>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf785cba30>,
               'model_id': 2,
               'rank': 5,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e27fa60>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7e008be0>,
               'ensemble_weight': 0.14,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7f10c9d0>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7f2246d0>,
               'cost': 0.04255319148936165,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70f7ec10>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7f1eebe0>,
               'model_id': 6,
               'rank': 11,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=10, n_estimators=64,
                         n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e2e7be0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70e99490>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c9c0e50>,
               'model_id': 9,
               'rank': 8,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=64,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf827e1100>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf70a26280>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7dd3ca00>,
                'model_id': 10,
                'rank': 9,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0647401999412075e-10,
                                   learning_rate=0.08291320147381159, max_iter=64,
                                   max_leaf_nodes=39, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf824e4130>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d0d4370>,
                'ensemble_weight': 0.26,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf70a10c70>,
                'model_id': 11,
                'rank': 6,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.387912939529945e-10,
                                   learning_rate=0.30755227194768237, max_iter=64,
                                   max_leaf_nodes=60, min_samples_leaf=39,
                                   n_iter_no_change=18, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7c039e20>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7bdbbb80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7c0393d0>,
                'model_id': 14,
                'rank': 10,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=448, min_samples_leaf=2,
                         min_samples_split=20, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbf7e337d00>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbf7d0cc5e0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbf7bad0ee0>,
                'model_id': 15,
                'rank': 7,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=4, min_samples_leaf=2,
                         min_samples_split=15, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 17
      Number of successful target algorithm runs: 17
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  19.427 seconds)


.. _sphx_glr_download_examples_60_search_example_successive_halving.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_successive_halving.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_successive_halving.py <example_successive_halving.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_successive_halving.ipynb <example_successive_halving.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
