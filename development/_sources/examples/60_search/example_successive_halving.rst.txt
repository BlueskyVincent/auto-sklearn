
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_successive_halving.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_successive_halving.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_successive_halving.py:


==================
Successive Halving
==================

This advanced  example illustrates how to interact with
the SMAC callback and get relevant information from the run, like
the number of iterations. Particularly, it exemplifies how to select
the intensification strategy to use in smac, in this case:
`SuccessiveHalving <http://proceedings.mlr.press/v80/falkner18a/falkner18a-supp.pdf>`_.

This results in an adaptation of the `BOHB algorithm <http://proceedings.mlr.press/v80/falkner18a/falkner18a.pdf>`_.
It uses Successive Halving instead of `Hyperband <https://jmlr.org/papers/volume18/16-558/16-558.pdf>`_, and could be abbreviated as BOSH.
To get the BOHB algorithm, simply import Hyperband and use it as the intensification strategy.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Define a callback that instantiates SuccessiveHalving
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 29-84

.. code-block:: default



    def get_smac_object_callback(budget_type):
        def get_smac_object(
            scenario_dict,
            seed,
            ta,
            ta_kwargs,
            metalearning_configurations,
            n_jobs,
            dask_client,
        ):
            from smac.facade.smac_ac_facade import SMAC4AC
            from smac.intensification.successive_halving import SuccessiveHalving
            from smac.runhistory.runhistory2epm import RunHistory2EPM4LogCost
            from smac.scenario.scenario import Scenario

            if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
                raise ValueError(
                    "Please make sure to guard the code invoking Auto-sklearn by "
                    "`if __name__ == '__main__'` and remove this exception."
                )

            scenario = Scenario(scenario_dict)
            if len(metalearning_configurations) > 0:
                default_config = scenario.cs.get_default_configuration()
                initial_configurations = [default_config] + metalearning_configurations
            else:
                initial_configurations = None
            rh2EPM = RunHistory2EPM4LogCost

            ta_kwargs["budget_type"] = budget_type

            return SMAC4AC(
                scenario=scenario,
                rng=seed,
                runhistory2epm=rh2EPM,
                tae_runner=ta,
                tae_runner_kwargs=ta_kwargs,
                initial_configurations=initial_configurations,
                run_id=seed,
                intensifier=SuccessiveHalving,
                intensifier_kwargs={
                    "initial_budget": 10.0,
                    "max_budget": 100,
                    "eta": 2,
                    "min_chall": 1,
                },
                n_jobs=n_jobs,
                dask_client=dask_client,
            )

        return get_smac_object









.. GENERATED FROM PYTHON SOURCE LINES 85-87

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 94-96

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 96-128

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be916520>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd1ca9d0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be916460>,
               'model_id': 3,
               'rank': 8,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2beff90d0>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcf23940>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2befecbe0>,
               'model_id': 4,
               'rank': 19,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0480910>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd222580>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0480760>,
               'model_id': 5,
               'rank': 9,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd19bcd0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2be5691f0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd19bbe0>,
               'model_id': 7,
               'rank': 13,
               'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c1857220>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c2b48760>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bf757550>,
               'model_id': 8,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c08b72e0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c251fca0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c08b7190>,
               'model_id': 9,
               'rank': 6,
               'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd653040>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c2157550>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd64ff40>,
                'model_id': 10,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=5.027708640006448e-08,
                                   learning_rate=0.09750328007832798, max_iter=64,
                                   max_leaf_nodes=1234, min_samples_leaf=25,
                                   n_iter_no_change=1, random_state=1,
                                   validation_fraction=0.08300813783286698,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd3917c0>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2be915070>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd391700>,
                'model_id': 11,
                'rank': 11,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0945814167023392e-10,
                                   learning_rate=0.11042628136263043, max_iter=128,
                                   max_leaf_nodes=30, min_samples_leaf=22,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bfe12730>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0ebaee0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bfe12640>,
                'model_id': 12,
                'rank': 16,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=1, min_samples_leaf=6,
                           min_samples_split=13, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bc7063d0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcddcc70>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bc706190>,
                'model_id': 13,
                'rank': 14,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.506856350040198e-06,
                                   learning_rate=0.04634380160611007, max_iter=64,
                                   max_leaf_nodes=11, min_samples_leaf=41,
                                   n_iter_no_change=17, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bea80a00>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd77a7f0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bea808e0>,
                'model_id': 14,
                'rank': 15,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=3, min_samples_leaf=2,
                         min_samples_split=3, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bdc95a60>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0702d90>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bdc95520>,
                'model_id': 16,
                'rank': 17,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=12,
                           min_samples_leaf=15, min_samples_split=6,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be65c8b0>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcce19a0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be65c730>,
                'model_id': 17,
                'rank': 20,
                'sklearn_classifier': SGDClassifier(alpha=9.410144741041167e-05, average=True,
                  eta0=0.0018055343233337954, learning_rate='constant', loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=0.05082904256838701, warm_start=True)},
        18: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c09a0ac0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf5b2250>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c09a0880>,
                'model_id': 18,
                'rank': 18,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=10,
                           min_samples_leaf=14, min_samples_split=14,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        19: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd797fa0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bdaa4f70>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd797e50>,
                'model_id': 19,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=13,
                           min_samples_leaf=13, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 25
      Number of successful target algorithm runs: 25
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.9440559440559441




.. GENERATED FROM PYTHON SOURCE LINES 129-131

We can also use cross-validation with successive halving
========================================================

.. GENERATED FROM PYTHON SOURCE LINES 131-166

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_01",
        disable_evaluator_output=False,
        resampling_strategy="cv",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'cost': 0.046948356807511755,
               'ensemble_weight': 0.16,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd667e50>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bda16f70>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd667be0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be516a30>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0bae100>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be516970>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0ae7280>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd31c2e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0ae7190>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be823070>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c25aaee0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2beb40f70>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd7420d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2b8257f40>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bcbddfd0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 2,
               'rank': 6,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        3: {   'cost': 0.05164319248826292,
               'ensemble_weight': 0.06,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bf452400>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd651340>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be51eee0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2beb209a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2be691ca0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2beb208e0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c099d6a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd2a3b50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c099d2b0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2b834e610>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bdb1cf40>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2b834e550>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd86a1f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0a74b20>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd86a130>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)}],
               'model_id': 3,
               'rank': 8,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        4: {   'cost': 0.08215962441314555,
               'ensemble_weight': 0.24,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd3b0e80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0a0f5e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd3b0a30>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be1f2b50>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf2e0880>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be1f29d0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0a67250>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0f225e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0a74760>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be6a6340>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bfbe4b50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be6a6280>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bead3880>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf5469a0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bead3ca0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)}],
               'model_id': 4,
               'rank': 9,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        5: {   'cost': 0.035211267605633804,
               'ensemble_weight': 0.02,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd3753d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0d21d90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bda16cd0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bea889a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bdc33370>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bea88880>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd798df0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf2cb8e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd798d30>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0a09a60>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd6261f0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0a099a0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bdb4baf0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcb1aa30>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bdb4ba30>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)}],
               'model_id': 5,
               'rank': 3,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        6: {   'cost': 0.04694835680751174,
               'ensemble_weight': 0.02,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0040e80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcbb85b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bda2acd0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c2587250>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd1e8fa0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c2587190>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bce2baf0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcbd3d00>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bce2ba30>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0fd7970>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2be846850>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0fd78b0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2b82052e0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd68f1f0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2b8205460>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)}],
               'model_id': 6,
               'rank': 7,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        7: {   'cost': 0.035211267605633784,
               'ensemble_weight': 0.12,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bcdfbb20>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c089c2b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bcdfb5b0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be9fafd0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2b8207640>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be9fad30>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be707310>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd55a100>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be707250>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2beeaf550>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0126400>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2beeaf490>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd0a7d00>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2becd1bb0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd0a7c40>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)}],
               'model_id': 7,
               'rank': 4,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        8: {   'cost': 0.039906103286385,
               'ensemble_weight': 0.04,
               'estimators': [   {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd2a3af0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd2849d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd2a3460>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2beeaf760>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c00401c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2beeaf6a0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0b8d850>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c1aefcd0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0b8d790>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd34f8b0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf452760>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd34f7f0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd223910>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd3207c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd223850>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 8,
               'rank': 5,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        9: {   'cost': 0.030516431924882622,
               'ensemble_weight': 0.2,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0d41af0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c0d3d850>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd284850>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c2f2d0a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bef41c10>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c52a3d00>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bea88e80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd196f40>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bea88dc0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bf2e07f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bcdb6f70>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bf2e06a0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c07acd60>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd37f790>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c07acca0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)}],
               'model_id': 9,
               'rank': 2,
               'voting_model': VotingClassifier(estimators=None, voting='soft')}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971831
      Number of target algorithm runs: 10
      Number of successful target algorithm runs: 9
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 167-169

Use an iterative fit cross-validation with successive halving
=============================================================

.. GENERATED FROM PYTHON SOURCE LINES 169-204

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_cv_02",
        disable_evaluator_output=False,
        resampling_strategy="cv-iterative-fit",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bda162e0>,
               'cost': 0.046948356807511755,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd642d00>,
               'ensemble_weight': 0.34,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bda16c40>,
               'model_id': 2,
               'rank': 4,
               'sklearn_classifier': None},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bf454580>,
               'cost': 0.05164319248826292,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2b822bac0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c309e610>,
               'model_id': 3,
               'rank': 6,
               'sklearn_classifier': None},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c70605e0>,
               'cost': 0.11267605633802817,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bfdb8bb0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c2a94850>,
               'model_id': 4,
               'rank': 7,
               'sklearn_classifier': None},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2b822b760>,
               'cost': 0.035211267605633804,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bec8a1c0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2b822b430>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': None},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c242f940>,
               'cost': 0.04694835680751174,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2b8216040>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c1c9cb50>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': None},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd642d90>,
               'cost': 0.03286384976525822,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd6421f0>,
               'ensemble_weight': 0.34,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c304bdf0>,
               'model_id': 7,
               'rank': 1,
               'sklearn_classifier': None},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c07ac700>,
               'cost': 0.042253521126760576,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bfdb96a0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c07ac280>,
               'model_id': 8,
               'rank': 3,
               'sklearn_classifier': None}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.967136
      Number of target algorithm runs: 7
      Number of successful target algorithm runs: 7
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.972027972027972




.. GENERATED FROM PYTHON SOURCE LINES 205-207

Next, we see the use of subsampling as a budget in Auto-sklearn
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 207-235

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_03",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        get_smac_object_callback=get_smac_object_callback("subsample"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd29df70>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf5c9340>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd29de20>,
               'model_id': 2,
               'rank': 3,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bdb1c400>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2b8257bb0>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bf47f850>,
               'model_id': 3,
               'rank': 1,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0001363185819149026, beta_1=0.999,
                  beta_2=0.9, early_stopping=True,
                  hidden_layer_sizes=(115, 115, 115),
                  learning_rate_init=0.00018009776276177523, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bdaeed30>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bdb1c070>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bdaee7c0>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.00021148999718383549, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(113, 113, 113),
                  learning_rate_init=0.0007452270241186694, max_iter=32,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd6c6fd0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c1aefee0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bcdb6b50>,
               'model_id': 5,
               'rank': 7,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2b83733a0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bf5c92e0>,
               'ensemble_weight': 0.2,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2b8373730>,
               'model_id': 6,
               'rank': 2,
               'sklearn_classifier': MLPClassifier(alpha=0.0017940473175767063, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(101, 101),
                  learning_rate_init=0.0004684917334431039, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2b834e2e0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd6c6d30>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0f3ca30>,
               'model_id': 8,
               'rank': 11,
               'sklearn_classifier': RandomForestClassifier(max_features=2, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bfda7d60>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd0f1070>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c157d100>,
               'model_id': 9,
               'rank': 13,
               'sklearn_classifier': ExtraTreesClassifier(max_features=6, min_samples_split=10, n_estimators=512,
                         n_jobs=1, random_state=1, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c0d06730>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd377b80>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be8fd970>,
                'model_id': 10,
                'rank': 6,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, min_samples_split=6,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        11: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bcf21a00>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c242f220>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bcf21430>,
                'model_id': 11,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2be711c10>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c15efb50>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2be7114c0>,
                'model_id': 12,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=512,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.978723
      Number of target algorithm runs: 15
      Number of successful target algorithm runs: 15
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.9440559440559441




.. GENERATED FROM PYTHON SOURCE LINES 236-240

Mixed budget approach
=====================
Finally, there's a mixed budget type which uses iterations where possible and
subsamples otherwise

.. GENERATED FROM PYTHON SOURCE LINES 240-270

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_04",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": ["extra_trees", "gradient_boosting", "random_forest", "sgd"]
        },
        get_smac_object_callback=get_smac_object_callback("mixed"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:76: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:80: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2c259e250>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd2845b0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c259e670>,
               'model_id': 2,
               'rank': 5,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd28e730>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd57f8e0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bd28e940>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bda85bb0>,
               'cost': 0.04255319148936165,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c21577c0>,
               'ensemble_weight': 0.14,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2c0ea2a00>,
               'model_id': 6,
               'rank': 11,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=10, n_estimators=64,
                         n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bc6e9340>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c1a61b80>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bc6e93a0>,
               'model_id': 9,
               'rank': 8,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=64,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bcd994c0>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd375370>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bcd99dc0>,
                'model_id': 11,
                'rank': 7,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.387912939529945e-10,
                                   learning_rate=0.30755227194768237, max_iter=128,
                                   max_leaf_nodes=60, min_samples_leaf=39,
                                   n_iter_no_change=18, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bcf7b6a0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd1ca6a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bccc2b50>,
                'model_id': 12,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.4635442279519353,
                                   learning_rate=0.09809681787962342, max_iter=64,
                                   max_leaf_nodes=328, min_samples_leaf=2,
                                   n_iter_no_change=2, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bd529100>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2bd34f310>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bddce220>,
                'model_id': 16,
                'rank': 9,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=8.057778875694463e-05,
                                   learning_rate=0.09179220974965213, max_iter=64,
                                   max_leaf_nodes=200, n_iter_no_change=18,
                                   random_state=1,
                                   validation_fraction=0.14295295806077554,
                                   warm_start=True)},
        17: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc2bfd9d970>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc2c23313d0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc2bfd9d430>,
                'model_id': 17,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=16, n_estimators=64,
                           n_jobs=1, random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 21
      Number of successful target algorithm runs: 21
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.9440559440559441





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  14.495 seconds)


.. _sphx_glr_download_examples_60_search_example_successive_halving.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_successive_halving.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_successive_halving.py <example_successive_halving.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_successive_halving.ipynb <example_successive_halving.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
