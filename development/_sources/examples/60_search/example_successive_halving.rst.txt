
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_successive_halving.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_successive_halving.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_successive_halving.py:


==================
Successive Halving
==================

This advanced  example illustrates how to interact with
the SMAC callback and get relevant information from the run, like
the number of iterations. Particularly, it exemplifies how to select
the intensification strategy to use in smac, in this case:
`SuccessiveHalving <http://proceedings.mlr.press/v80/falkner18a/falkner18a-supp.pdf>`_.

This results in an adaptation of the `BOHB algorithm <http://proceedings.mlr.press/v80/falkner18a/falkner18a.pdf>`_.
It uses Successive Halving instead of `Hyperband <https://jmlr.org/papers/volume18/16-558/16-558.pdf>`_, and could be abbreviated as BOSH.
To get the BOHB algorithm, simply import Hyperband and use it as the intensification strategy.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Define a callback that instantiates SuccessiveHalving
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 29-86

.. code-block:: default



    def get_smac_object_callback(budget_type):
        def get_smac_object(
            scenario_dict,
            seed,
            ta,
            ta_kwargs,
            metalearning_configurations,
            n_jobs,
            dask_client,
            multi_objective_algorithm,  # This argument will be ignored as SH does not yet support multi-objective optimization
            multi_objective_kwargs,
        ):
            from smac.facade.smac_ac_facade import SMAC4AC
            from smac.intensification.successive_halving import SuccessiveHalving
            from smac.runhistory.runhistory2epm import RunHistory2EPM4LogCost
            from smac.scenario.scenario import Scenario

            if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
                raise ValueError(
                    "Please make sure to guard the code invoking Auto-sklearn by "
                    "`if __name__ == '__main__'` and remove this exception."
                )

            scenario = Scenario(scenario_dict)
            if len(metalearning_configurations) > 0:
                default_config = scenario.cs.get_default_configuration()
                initial_configurations = [default_config] + metalearning_configurations
            else:
                initial_configurations = None
            rh2EPM = RunHistory2EPM4LogCost

            ta_kwargs["budget_type"] = budget_type

            return SMAC4AC(
                scenario=scenario,
                rng=seed,
                runhistory2epm=rh2EPM,
                tae_runner=ta,
                tae_runner_kwargs=ta_kwargs,
                initial_configurations=initial_configurations,
                run_id=seed,
                intensifier=SuccessiveHalving,
                intensifier_kwargs={
                    "initial_budget": 10.0,
                    "max_budget": 100,
                    "eta": 2,
                    "min_chall": 1,
                },
                n_jobs=n_jobs,
                dask_client=dask_client,
            )

        return get_smac_object









.. GENERATED FROM PYTHON SOURCE LINES 87-89

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 89-95

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 96-98

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 98-130

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8bd0e070>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8568d550>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8bd0e700>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c320460>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e908e59d0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c3206d0>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8881d9a0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8e9e9490>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8881da90>,
               'model_id': 6,
               'rank': 3,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e876df5e0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e90cc9c70>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e876df880>,
               'model_id': 7,
               'rank': 4,
               'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8bfbf760>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c9166d0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8bfbfa30>,
               'model_id': 8,
               'rank': 8,
               'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e97dd30>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8cb230a0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8e97d430>,
               'model_id': 9,
               'rank': 9,
               'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=64, n_jobs=1, random_state=1,
                         warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8589a580>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c3f2610>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e907d8370>,
                'model_id': 10,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=5.027708640006448e-08,
                                   learning_rate=0.09750328007832798, max_iter=64,
                                   max_leaf_nodes=1234, min_samples_leaf=25,
                                   n_iter_no_change=1, random_state=1,
                                   validation_fraction=0.08300813783286698,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e86f17220>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e881e2460>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c430a60>,
                'model_id': 11,
                'rank': 14,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0945814167023392e-10,
                                   learning_rate=0.11042628136263043, max_iter=512,
                                   max_leaf_nodes=30, min_samples_leaf=22,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e86b8d670>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ca1fd30>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e86b8d610>,
                'model_id': 12,
                'rank': 15,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=1, min_samples_leaf=6,
                           min_samples_split=13, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8eb13340>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88909d30>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c7ce820>,
                'model_id': 13,
                'rank': 16,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.506856350040198e-06,
                                   learning_rate=0.04634380160611007, max_iter=64,
                                   max_leaf_nodes=11, min_samples_leaf=41,
                                   n_iter_no_change=17, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8921d880>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8b974d30>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8921d250>,
                'model_id': 14,
                'rank': 17,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=3, min_samples_leaf=2,
                         min_samples_split=3, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c483b80>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1ea40df2b0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c483880>,
                'model_id': 15,
                'rank': 18,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=0.0005657707133726288,
                                   learning_rate=0.09546265146045475, max_iter=64,
                                   max_leaf_nodes=109, min_samples_leaf=2,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e9fea3220>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e908141f0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e9fea3460>,
                'model_id': 16,
                'rank': 19,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=12,
                           min_samples_leaf=15, min_samples_split=6,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e9080c6d0>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8928dd90>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e9080c580>,
                'model_id': 17,
                'rank': 20,
                'sklearn_classifier': SGDClassifier(alpha=9.410144741041167e-05, average=True,
                  eta0=0.0018055343233337954, learning_rate='constant', loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=0.05082904256838701, warm_start=True)},
        18: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8eb6cdf0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c83b700>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8eb6cc40>,
                'model_id': 18,
                'rank': 21,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=10,
                           min_samples_leaf=14, min_samples_split=14,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 23
      Number of successful target algorithm runs: 23
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 131-133

We can also use cross-validation with successive halving
========================================================

.. GENERATED FROM PYTHON SOURCE LINES 133-168

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_01",
        disable_evaluator_output=False,
        resampling_strategy="cv",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'cost': 0.046948356807511755,
               'ensemble_weight': 0.1,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e88218fd0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e86b8d280>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e88218d60>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d209250>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c87eb50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d209d30>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d0fc730>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8bfd8c70>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d0fc3a0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e88d831f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8882c790>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e88d83640>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e892408b0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ed63760>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e892405e0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 2,
               'rank': 1,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        4: {   'cost': 0.08215962441314555,
               'ensemble_weight': 0.22,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e91a430>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e870b88e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e90814460>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8b9749a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e893bffa0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8b974d90>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8ed63700>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8b7884c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8e8bb4f0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e88b6c1c0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e89206400>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e88b6c6d0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e932b20>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c3f26a0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8e932760>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)}],
               'model_id': 4,
               'rank': 2,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        6: {   'cost': 0.04694835680751174,
               'ensemble_weight': 0.06,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8b7762b0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e870b8a30>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8b776790>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d23cbe0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e886d0610>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d23cf70>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8be000d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c78b8e0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8be00df0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1ea40fe760>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e89231730>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1ea40fe5b0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e89312e20>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ca77640>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e893121c0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)}],
               'model_id': 6,
               'rank': 3,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        7: {   'cost': 0.035211267605633784,
               'ensemble_weight': 0.12,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e90992a00>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8eb190d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8882c520>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e89231b80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e89370910>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c86f6a0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e87c6a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ca772b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8e87c790>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8567c100>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c84f3a0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8567c580>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e8c8a30>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e888d29a0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e81dd6580>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)}],
               'model_id': 7,
               'rank': 4,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        8: {   'cost': 0.039906103286385,
               'ensemble_weight': 0.24,
               'estimators': [   {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c3f2c40>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ea13a60>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c3f2370>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e905bbe80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88b3b8b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e905bb4f0>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e880e94f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c6ac9d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e880e9130>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e855f6820>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8bfbf310>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e855f6370>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c64e5e0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8cbd6eb0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c64ee50>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 8,
               'rank': 5,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        9: {   'cost': 0.030516431924882622,
               'ensemble_weight': 0.2,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e905bb8b0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8e9f5280>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8bd0e9a0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8ed4ffd0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e887f60d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e85c83550>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d188a60>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c059bb0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d1889a0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c395310>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ec33d30>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c395250>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d221ca0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8bc39700>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d221be0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)}],
               'model_id': 9,
               'rank': 7,
               'voting_model': VotingClassifier(estimators=None, voting='soft')}}
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971831
      Number of target algorithm runs: 10
      Number of successful target algorithm runs: 9
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Use an iterative fit cross-validation with successive halving
=============================================================

.. GENERATED FROM PYTHON SOURCE LINES 171-206

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_cv_02",
        disable_evaluator_output=False,
        resampling_strategy="cv-iterative-fit",
        include={
            "classifier": [
                "extra_trees",
                "gradient_boosting",
                "random_forest",
                "sgd",
                "passive_aggressive",
            ],
            "feature_preprocessor": ["no_preprocessing"],
        },
        get_smac_object_callback=get_smac_object_callback("iterations"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8be39c70>,
               'cost': 0.046948356807511755,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8bd67670>,
               'ensemble_weight': 0.32,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8be398b0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': None},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c86f3d0>,
               'cost': 0.05164319248826292,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e908e56d0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c86f9d0>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': None},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e876df730>,
               'cost': 0.11267605633802817,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8926b250>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c756ee0>,
               'model_id': 4,
               'rank': 3,
               'sklearn_classifier': None},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8873f6d0>,
               'cost': 0.035211267605633804,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8be39d90>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8873fc10>,
               'model_id': 5,
               'rank': 4,
               'sklearn_classifier': None},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d0fa310>,
               'cost': 0.04694835680751174,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e904d6790>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d0fa490>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': None},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8ea7ddf0>,
               'cost': 0.03286384976525822,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c756610>,
               'ensemble_weight': 0.36,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8ea7d5e0>,
               'model_id': 7,
               'rank': 6,
               'sklearn_classifier': None}}
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/sklearn/impute/_base.py:49: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.
      mode = stats.mode(array)
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.967136
      Number of target algorithm runs: 7
      Number of successful target algorithm runs: 6
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.972027972027972




.. GENERATED FROM PYTHON SOURCE LINES 207-209

Next, we see the use of subsampling as a budget in Auto-sklearn
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 209-237

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_03",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        get_smac_object_callback=get_smac_object_callback("subsample"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8589adf0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ba89400>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e908db9a0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e855f6d00>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e908f1a00>,
               'ensemble_weight': 0.18,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e855f6e50>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0001363185819149026, beta_1=0.999,
                  beta_2=0.9, early_stopping=True,
                  hidden_layer_sizes=(115, 115, 115),
                  learning_rate_init=0.00018009776276177523, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8e932940>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88aa8040>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e892407f0>,
               'model_id': 5,
               'rank': 3,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e893bf7c0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8589ae20>,
               'ensemble_weight': 0.3,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e893bf1c0>,
               'model_id': 6,
               'rank': 4,
               'sklearn_classifier': MLPClassifier(alpha=0.0017940473175767063, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(101, 101),
                  learning_rate_init=0.0004684917334431039, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c66d4f0>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c82dbb0>,
               'ensemble_weight': 0.16,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8bc29d30>,
               'model_id': 7,
               'rank': 8,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e876df970>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8cb14670>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c93f0a0>,
               'model_id': 8,
               'rank': 9,
               'sklearn_classifier': RandomForestClassifier(max_features=3, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c34da30>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ca0eb50>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8928d070>,
               'model_id': 9,
               'rank': 10,
               'sklearn_classifier': ExtraTreesClassifier(max_features=6, min_samples_split=10, n_estimators=512,
                         n_jobs=1, random_state=1, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e890527c0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ba18730>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e89052160>,
                'model_id': 10,
                'rank': 11,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, min_samples_split=6,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        11: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c6aca60>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88b6c490>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c6ac220>,
                'model_id': 11,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8bd67790>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8ca771f0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e90986730>,
                'model_id': 12,
                'rank': 13,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=512,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 15
      Number of successful target algorithm runs: 14
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 238-242

Mixed budget approach
=====================
Finally, there's a mixed budget type which uses iterations where possible and
subsamples otherwise

.. GENERATED FROM PYTHON SOURCE LINES 242-272

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1, shuffle=True
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder="/tmp/autosklearn_sh_example_tmp_04",
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy="holdout",
        resampling_strategy_arguments={"train_size": 0.67},
        include={
            "classifier": ["extra_trees", "gradient_boosting", "random_forest", "sgd"]
        },
        get_smac_object_callback=get_smac_object_callback("mixed"),
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8ed4fd00>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e904e5dc0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e904e5b80>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8eb19e80>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88c36e50>,
               'ensemble_weight': 0.16,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8cbd6e20>,
               'model_id': 4,
               'rank': 5,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8d059730>,
               'cost': 0.04255319148936165,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8b8b85e0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e893704f0>,
               'model_id': 6,
               'rank': 6,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=10, n_estimators=64,
                         n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e88f3ab50>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c6acbe0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8eb13430>,
               'model_id': 9,
               'rank': 7,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=64,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e887bc7f0>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e88d94430>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e887bcb50>,
                'model_id': 11,
                'rank': 9,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.387912939529945e-10,
                                   learning_rate=0.30755227194768237, max_iter=128,
                                   max_leaf_nodes=60, min_samples_leaf=39,
                                   n_iter_no_change=18, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c81b670>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e888d2c40>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8eb99e50>,
                'model_id': 12,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.4635442279519353,
                                   learning_rate=0.09809681787962342, max_iter=64,
                                   max_leaf_nodes=328, min_samples_leaf=2,
                                   n_iter_no_change=2, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c87ec10>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e8c145ee0>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8c87ee50>,
                'model_id': 14,
                'rank': 11,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=448, min_samples_leaf=2,
                         min_samples_split=20, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8ba18c70>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e887bce80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8ba18d60>,
                'model_id': 15,
                'rank': 12,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=4, min_samples_leaf=2,
                         min_samples_split=15, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1e8c760520>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1e870f1cd0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1e8d0fc8e0>,
                'model_id': 16,
                'rank': 13,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=8.057778875694463e-05,
                                   learning_rate=0.09179220974965213, max_iter=64,
                                   max_leaf_nodes=200, n_iter_no_change=18,
                                   random_state=1,
                                   validation_fraction=0.14295295806077554,
                                   warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 21
      Number of successful target algorithm runs: 21
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.9440559440559441





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  0.395 seconds)


.. _sphx_glr_download_examples_60_search_example_successive_halving.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_successive_halving.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_successive_halving.py <example_successive_halving.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_successive_halving.ipynb <example_successive_halving.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
