
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_sequential.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_sequential.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_sequential.py:


================
Sequential Usage
================

By default, *auto-sklearn* fits the machine learning models and build their
ensembles in parallel. However, it is also possible to run the two processes
sequentially. The example below shows how to first fit the models and build the
ensembles afterwards.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 21-23

Data Loading
======================================

.. GENERATED FROM PYTHON SOURCE LINES 23-30

.. code-block:: default

    from autosklearn.ensembles.ensemble_selection import EnsembleSelection

    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Build and fit the classifier
======================================

.. GENERATED FROM PYTHON SOURCE LINES 33-49

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        tmp_folder="/tmp/autosklearn_sequential_example_tmp",
        # Do not construct ensembles in parallel to avoid using more than one
        # core at a time. The ensemble will be constructed after auto-sklearn
        # finished fitting all machine learning models.
        ensemble_class=None,
        delete_tmp_folder_after_terminate=False,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    # This call to fit_ensemble uses all models trained in the previous call
    # to fit to build an ensemble which can be used with automl.predict()
    automl.fit_ensemble(y_train, ensemble_class=EnsembleSelection)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    RunKey(config_id=1, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=2.206500291824341, status=<StatusType.SUCCESS: 1>, starttime=1654150552.1445315, endtime=1654150554.3757353, additional_info={'duration': 2.0908920764923096, 'num_run': 2, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=2, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=1.3874294757843018, status=<StatusType.SUCCESS: 1>, starttime=1654150554.3808177, endtime=1654150555.7926567, additional_info={'duration': 1.301229476928711, 'num_run': 3, 'train_loss': 0.01754385964912286, 'configuration_origin': 'Initial design'})
    RunKey(config_id=3, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.05673758865248224, time=2.1713788509368896, status=<StatusType.SUCCESS: 1>, starttime=1654150555.797282, endtime=1654150557.9934478, additional_info={'duration': 2.0816383361816406, 'num_run': 4, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=4, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.03546099290780147, time=2.675473213195801, status=<StatusType.SUCCESS: 1>, starttime=1654150557.998445, endtime=1654150560.6997943, additional_info={'duration': 2.5355536937713623, 'num_run': 5, 'train_loss': 0.0035087719298245723, 'configuration_origin': 'Initial design'})
    RunKey(config_id=5, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=1.504925012588501, status=<StatusType.SUCCESS: 1>, starttime=1654150560.7053502, endtime=1654150562.2408578, additional_info={'duration': 1.4187991619110107, 'num_run': 6, 'train_loss': 0.024561403508771895, 'configuration_origin': 'Initial design'})
    RunKey(config_id=6, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.014184397163120588, time=2.0387213230133057, status=<StatusType.SUCCESS: 1>, starttime=1654150562.2465196, endtime=1654150564.310986, additional_info={'duration': 1.9223413467407227, 'num_run': 7, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=7, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.03546099290780147, time=2.591686248779297, status=<StatusType.SUCCESS: 1>, starttime=1654150564.3194149, endtime=1654150566.942111, additional_info={'duration': 2.4713919162750244, 'num_run': 8, 'train_loss': 0.0035087719298245723, 'configuration_origin': 'Initial design'})
    RunKey(config_id=8, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.04255319148936165, time=2.425109386444092, status=<StatusType.SUCCESS: 1>, starttime=1654150566.9479735, endtime=1654150569.3976393, additional_info={'duration': 2.308595895767212, 'num_run': 9, 'train_loss': 0.0035087719298245723, 'configuration_origin': 'Initial design'})
    RunKey(config_id=9, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=2.457731008529663, status=<StatusType.SUCCESS: 1>, starttime=1654150569.403496, endtime=1654150571.8880882, additional_info={'duration': 2.3445825576782227, 'num_run': 10, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=10, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=2.6401565074920654, status=<StatusType.SUCCESS: 1>, starttime=1654150571.8943243, endtime=1654150574.559648, additional_info={'duration': 2.526216983795166, 'num_run': 11, 'train_loss': 0.0035087719298245723, 'configuration_origin': 'Initial design'})
    RunKey(config_id=11, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.03546099290780147, time=1.724069595336914, status=<StatusType.SUCCESS: 1>, starttime=1654150574.566283, endtime=1654150576.3169901, additional_info={'duration': 1.629981279373169, 'num_run': 12, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=12, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=1.9333455562591553, status=<StatusType.SUCCESS: 1>, starttime=1654150576.3236692, endtime=1654150578.2837536, additional_info={'duration': 1.8341753482818604, 'num_run': 13, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=13, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=2.742340326309204, status=<StatusType.SUCCESS: 1>, starttime=1654150578.2911787, endtime=1654150581.059096, additional_info={'duration': 2.6429691314697266, 'num_run': 14, 'train_loss': 0.010526315789473717, 'configuration_origin': 'Initial design'})
    RunKey(config_id=14, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.049645390070921946, time=5.409489631652832, status=<StatusType.SUCCESS: 1>, starttime=1654150581.066636, endtime=1654150586.5034752, additional_info={'duration': 5.310756683349609, 'num_run': 15, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=15, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.021276595744680882, time=1.4237241744995117, status=<StatusType.SUCCESS: 1>, starttime=1654150586.51127, endtime=1654150587.9624226, additional_info={'duration': 1.3324928283691406, 'num_run': 16, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=16, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.03546099290780147, time=2.322878122329712, status=<StatusType.SUCCESS: 1>, starttime=1654150587.9705532, endtime=1654150590.31968, additional_info={'duration': 2.215009927749634, 'num_run': 17, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=17, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.03546099290780147, time=2.6530139446258545, status=<StatusType.SUCCESS: 1>, starttime=1654150590.3278825, endtime=1654150593.0062153, additional_info={'duration': 2.521728277206421, 'num_run': 18, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    RunKey(config_id=18, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.028368794326241176, time=3.45263671875, status=<StatusType.SUCCESS: 1>, starttime=1654150593.0139544, endtime=1654150596.4970112, additional_info={'duration': 3.3350298404693604, 'num_run': 19, 'train_loss': 0.0035087719298245723, 'configuration_origin': 'Initial design'})
    RunKey(config_id=19, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.07801418439716312, time=1.0020105838775635, status=<StatusType.SUCCESS: 1>, starttime=1654150596.5054526, endtime=1654150597.5390306, additional_info={'duration': 0.9111685752868652, 'num_run': 20, 'train_loss': 0.10526315789473684, 'configuration_origin': 'Initial design'})
    RunKey(config_id=20, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=0.021276595744680882, time=1.9126918315887451, status=<StatusType.SUCCESS: 1>, starttime=1654150597.5493731, endtime=1654150599.4882786, additional_info={'duration': 1.7876403331756592, 'num_run': 21, 'train_loss': 0.007017543859649145, 'configuration_origin': 'Initial design'})
    RunKey(config_id=21, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0) RunValue(cost=1.0, time=0.0, status=<StatusType.STOP: 8>, starttime=1654150599.4975352, endtime=1654150599.4975355, additional_info={})

    AutoSklearnClassifier(delete_tmp_folder_after_terminate=False,
                          ensemble_class=None, per_run_time_limit=6,
                          time_left_for_this_task=60,
                          tmp_folder='/tmp/autosklearn_sequential_example_tmp')



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/automl.py:2127: UserWarning: No models in the ensemble. Kindly provide an ensemble class.
      warnings.warn(
    {}




.. GENERATED FROM PYTHON SOURCE LINES 56-58

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default


    predictions = automl.predict(X_test)
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 20
      Number of successful target algorithm runs: 20
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.9440559440559441





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.647 seconds)


.. _sphx_glr_download_examples_60_search_example_sequential.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_sequential.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_sequential.py <example_sequential.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_sequential.ipynb <example_sequential.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
