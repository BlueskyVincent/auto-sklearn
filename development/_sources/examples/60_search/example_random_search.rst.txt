
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_random_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_random_search.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_random_search.py:


=============
Random Search
=============

A crucial feature of *auto-sklearn* is automatically optimizing the hyperparameters through SMAC,
introduced `here <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_.
Additionally, it is possible to use
`random search <https://www.jmlr.org/papers/v13/bergstra12a.html>`_ instead of
SMAC, as demonstrated in the example below. Furthermore, the example also demonstrates how to use
`Random Online Aggressive Racing (ROAR) <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_
as yet another alternative optimizatino strategy.
Both examples are intended to show how the optimization strategy in *auto-sklearn* can be adapted.

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from smac.facade.roar_facade import ROAR
    from smac.scenario.scenario import Scenario

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 28-30

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )









.. GENERATED FROM PYTHON SOURCE LINES 38-40

Fit a classifier using ROAR
===========================

.. GENERATED FROM PYTHON SOURCE LINES 40-92

.. code-block:: default

    def get_roar_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
        multi_objective_algorithm,  # This argument will be ignored as ROAR does not yet support multi-objective optimization
        multi_objective_kwargs,
    ):
        """Random online adaptive racing."""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # The callback to get the SMAC object
        get_smac_object_callback=get_roar_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for ROAR.")
    # Print the final ensemble constructed by auto-sklearn via ROAR.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ################################################################################
    Results for ROAR.
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b609f7550>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59877df0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b609f72b0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60a86ee0>,
               'cost': 0.07092198581560283,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59877ee0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5ef5a490>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.10318256510142626, average=True, max_iter=32,
                                random_state=1, tol=0.0013607858153657413,
                                warm_start=True)},
        4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b56e8a160>,
               'cost': 0.08510638297872342,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b60b04400>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5ef75e80>,
               'model_id': 4,
               'rank': 3,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.000505280701827856, max_iter=32, random_state=1,
                                tol=0.06421873693006744, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5dd118e0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b55b1fa30>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5dd111c0>,
               'model_id': 5,
               'rank': 4,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=1.4469619760002166e-09,
                                   learning_rate=0.12309321429220763, max_iter=256,
                                   max_leaf_nodes=10, min_samples_leaf=17,
                                   n_iter_no_change=16, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5dacdc70>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b54d09fa0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5dacd9d0>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.08622878828999171)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5ed47ee0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b54d157c0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5ed47d30>,
               'model_id': 8,
               'rank': 6,
               'sklearn_classifier': PassiveAggressiveClassifier(C=5.4951544593926646e-05, average=True, max_iter=16,
                                random_state=1, tol=0.012344344043531127,
                                warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b56dc92b0>,
               'cost': 0.12056737588652477,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5ef43580>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b56dc97f0>,
               'model_id': 9,
               'rank': 7,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.09581923415311244, max_iter=64, random_state=1,
                                tol=0.000145918046557035, warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e48ed00>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5dcfc040>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b60bd5b80>,
                'model_id': 11,
                'rank': 8,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.039339489121391846)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54b229d0>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b548b63a0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54b22d60>,
                'model_id': 12,
                'rank': 9,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.0004182629077658861)},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59cd6c10>,
                'cost': 0.36879432624113473,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b57554c10>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59cd6490>,
                'model_id': 13,
                'rank': 10,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=1,
                         min_samples_leaf=20, min_samples_split=20,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b55c91910>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b52c60d90>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b609f7a60>,
                'model_id': 14,
                'rank': 11,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.013943862590174107)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e1467c0>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59483730>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5e6fccd0>,
                'model_id': 15,
                'rank': 12,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                           max_depth=1, min_samples_leaf=3, min_samples_split=13,
                           random_state=1)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59eab730>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59f26b80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59eab610>,
                'model_id': 16,
                'rank': 13,
                'sklearn_classifier': GaussianNB()},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59d6fca0>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5699dac0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59d6fc70>,
                'model_id': 17,
                'rank': 14,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.04885675602027957, average=True, max_iter=64,
                                random_state=1, tol=0.0002678322187543955,
                                warm_start=True)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5b7187c0>,
                'cost': 0.1063829787234043,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e392160>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5de01ee0>,
                'model_id': 18,
                'rank': 15,
                'sklearn_classifier': SGDClassifier(alpha=0.0002548862311968591, average=True,
                  eta0=4.278565071229579e-05, learning_rate='constant',
                  loss='squared_hinge', max_iter=1024, random_state=1,
                  tol=5.482673674397374e-05, warm_start=True)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5898ed60>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5da8c640>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5898ea30>,
                'model_id': 21,
                'rank': 16,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=4, min_samples_split=18,
                           random_state=1)},
        23: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60995250>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b608aa280>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b609959d0>,
                'model_id': 23,
                'rank': 17,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.02522490081077779, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.026536043936270744, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        24: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e5b27f0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59e3a7c0>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5e5b2370>,
                'model_id': 24,
                'rank': 18,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.001678686694320821)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e2a7310>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e8e43a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b609991c0>,
                'model_id': 26,
                'rank': 19,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=80, p=1)},
        27: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b58ef0b20>,
                'cost': 0.375886524822695,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b599a0580>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b58ea1370>,
                'model_id': 27,
                'rank': 20,
                'sklearn_classifier': BernoulliNB(alpha=9.144520523203788)},
        28: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5de51430>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b55c7f610>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5dca7ee0>,
                'model_id': 28,
                'rank': 21,
                'sklearn_classifier': GaussianNB()},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60b04250>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b54be2e80>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b60b048b0>,
                'model_id': 29,
                'rank': 22,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.08974262852727155, solver='lsqr',
                               tol=0.0053263194623885965)},
        30: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e8237c0>,
                'cost': 0.14893617021276595,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e5f9e20>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5e8232e0>,
                'model_id': 30,
                'rank': 23,
                'sklearn_classifier': BernoulliNB(alpha=87.79995280990563)},
        32: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59dfa6d0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e3b7550>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59dfac10>,
                'model_id': 32,
                'rank': 24,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=9,
                           min_samples_leaf=2, min_samples_split=16,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 32
      Number of successful target algorithm runs: 32
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.965034965034965




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Fit a classifier using Random Search
====================================

.. GENERATED FROM PYTHON SOURCE LINES 95-150

.. code-block:: default

    def get_random_search_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
        multi_objective_algorithm,  # This argument will be ignored as ROAR does not yet support multi-objective optimization
        multi_objective_kwargs,
    ):
        """Random search"""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario_dict["minR"] = len(scenario_dict["instances"])
        scenario_dict["initial_incumbent"] = "RANDOM"
        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # Passing the callback to get the SMAC object
        get_smac_object_callback=get_random_search_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for random search.")

    # Print the final ensemble constructed by auto-sklearn via random search.
    pprint(automl.show_models(), indent=4)

    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())

    predictions = automl.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ################################################################################
    Results for random search.
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b58f05a00>,
               'cost': 0.07092198581560283,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5eb291c0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b58f05e80>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.10318256510142626, average=True, max_iter=32,
                                random_state=1, tol=0.0013607858153657413,
                                warm_start=True)},
        3: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54be2670>,
               'cost': 0.08510638297872342,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b60ac0b50>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54be2cd0>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.000505280701827856, max_iter=32, random_state=1,
                                tol=0.06421873693006744, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b55c477f0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b60a14bb0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b53a7b970>,
               'model_id': 4,
               'rank': 3,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=1.4469619760002166e-09,
                                   learning_rate=0.12309321429220763, max_iter=256,
                                   max_leaf_nodes=10, min_samples_leaf=17,
                                   n_iter_no_change=16, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54dfe880>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b594ec460>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54dfeee0>,
               'model_id': 5,
               'rank': 4,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60cf9d30>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b60999a00>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b60cf9640>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.08622878828999171)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54803100>,
               'cost': 0.36879432624113473,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5ea58c10>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59d6fe20>,
               'model_id': 7,
               'rank': 6,
               'sklearn_classifier': BernoulliNB(alpha=0.020898102999400082)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59eabee0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e149280>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b59eabfd0>,
               'model_id': 8,
               'rank': 7,
               'sklearn_classifier': PassiveAggressiveClassifier(C=5.4951544593926646e-05, average=True, max_iter=16,
                                random_state=1, tol=0.012344344043531127,
                                warm_start=True)},
        10: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5de51f10>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5d8bf550>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5e3926a0>,
                'model_id': 10,
                'rank': 8,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=2, min_samples_leaf=11,
                         min_samples_split=19, n_estimators=512, n_jobs=1,
                         random_state=1, warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b59f78fa0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5918b340>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b592fdc10>,
                'model_id': 11,
                'rank': 9,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.039339489121391846)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5f013490>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e8ad250>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5f013940>,
                'model_id': 12,
                'rank': 10,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.0004182629077658861)},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e09ed60>,
                'cost': 0.36879432624113473,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5ed50580>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5e09ea60>,
                'model_id': 13,
                'rank': 11,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=1,
                         min_samples_leaf=20, min_samples_split=20,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b591d1a90>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5e3b7220>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b591d15b0>,
                'model_id': 14,
                'rank': 12,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.013943862590174107)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5dcfcfd0>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b54ee7b50>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5934e8e0>,
                'model_id': 15,
                'rank': 13,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                           max_depth=1, min_samples_leaf=3, min_samples_split=13,
                           random_state=1)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b52c74850>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5a05e580>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b52c740d0>,
                'model_id': 16,
                'rank': 14,
                'sklearn_classifier': GaussianNB()},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5db527f0>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b60be8d60>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5db52b50>,
                'model_id': 17,
                'rank': 15,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.04885675602027957, average=True, max_iter=64,
                                random_state=1, tol=0.0002678322187543955,
                                warm_start=True)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b576cf340>,
                'cost': 0.1063829787234043,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b548b6e50>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b576cf0a0>,
                'model_id': 18,
                'rank': 16,
                'sklearn_classifier': SGDClassifier(alpha=0.0002548862311968591, average=True,
                  eta0=4.278565071229579e-05, learning_rate='constant',
                  loss='squared_hinge', max_iter=1024, random_state=1,
                  tol=5.482673674397374e-05, warm_start=True)},
        19: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54de1910>,
                'cost': 0.09219858156028371,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5dcdb310>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54de1880>,
                'model_id': 19,
                'rank': 17,
                'sklearn_classifier': AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=7),
                       learning_rate=0.035867722843024794, n_estimators=70,
                       random_state=1)},
        20: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60d2f190>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b59cd0430>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5703d1f0>,
                'model_id': 20,
                'rank': 18,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=9),
                       learning_rate=0.21684295401135145, n_estimators=72,
                       random_state=1)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5d8c3c70>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b58eadaf0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5d8c3fa0>,
                'model_id': 21,
                'rank': 19,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=4, min_samples_split=18,
                           random_state=1)},
        23: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5b713580>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5d9314c0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5b713250>,
                'model_id': 23,
                'rank': 20,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.02522490081077779, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.026536043936270744, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        24: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54b22610>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5ef5aee0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54b226a0>,
                'model_id': 24,
                'rank': 21,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.001678686694320821)},
        25: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b561ba970>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b569aaaf0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5efb8490>,
                'model_id': 25,
                'rank': 22,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.1928852428306468e-08,
                                   learning_rate=0.29557366541255203, max_iter=64,
                                   max_leaf_nodes=70, min_samples_leaf=24,
                                   random_state=1,
                                   validation_fraction=0.13252036572629863,
                                   warm_start=True)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b5e13e3d0>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b54d15e20>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b5d7927c0>,
                'model_id': 26,
                'rank': 23,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=80, p=1)},
        27: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60abb250>,
                'cost': 0.375886524822695,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b589890a0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b58ed0640>,
                'model_id': 27,
                'rank': 24,
                'sklearn_classifier': BernoulliNB(alpha=9.144520523203788)},
        28: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60c479d0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b594838b0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b60c47af0>,
                'model_id': 28,
                'rank': 25,
                'sklearn_classifier': GaussianNB()},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b60cf48e0>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b5eae46d0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b60cf4b20>,
                'model_id': 29,
                'rank': 26,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.08974262852727155, solver='lsqr',
                               tol=0.0053263194623885965)},
        32: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f1b54c94730>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1b58ed02e0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1b54c94c10>,
                'model_id': 32,
                'rank': 27,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=9,
                           min_samples_leaf=2, min_samples_split=16,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 32
      Number of successful target algorithm runs: 32
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  50.197 seconds)


.. _sphx_glr_download_examples_60_search_example_random_search.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_random_search.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_random_search.py <example_random_search.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_random_search.ipynb <example_random_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
