
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_random_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_random_search.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_random_search.py:


=============
Random Search
=============

A crucial feature of *auto-sklearn* is automatically optimizing the hyperparameters through SMAC,
introduced `here <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_.
Additionally, it is possible to use
`random search <https://www.jmlr.org/papers/v13/bergstra12a.html>`_ instead of
SMAC, as demonstrated in the example below. Furthermore, the example also demonstrates how to use
`Random Online Aggressive Racing (ROAR) <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_
as yet another alternative optimizatino strategy.
Both examples are intended to show how the optimization strategy in *auto-sklearn* can be adapted.

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from smac.facade.roar_facade import ROAR
    from smac.scenario.scenario import Scenario

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 28-30

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)









.. GENERATED FROM PYTHON SOURCE LINES 37-39

Fit a classifier using ROAR
===========================

.. GENERATED FROM PYTHON SOURCE LINES 39-87

.. code-block:: default

    def get_roar_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
    ):
        """Random online adaptive racing."""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError("Please make sure to guard the code invoking Auto-sklearn by "
                             "`if __name__ == '__main__'` and remove this exception.")

        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder='/tmp/autosklearn_random_search_example_tmp',
        initial_configurations_via_metalearning=0,
        # The callback to get the SMAC object
        get_smac_object_callback=get_roar_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    print('#' * 80)
    print('Results for ROAR.')
    # Print the final ensemble constructed by auto-sklearn via ROAR.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Results for ROAR.
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab1a8adf0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaceab670>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab1a8a6d0>,
               'model_id': 2,
               'rank': 4,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaacfcd9a0>,
               'cost': 0.05673758865248224,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaab37a310>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab06d9d90>,
               'model_id': 4,
               'rank': 14,
               'sklearn_classifier': MLPClassifier(alpha=1.0400632553169558e-07, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.0018475934154961215, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab05aec40>,
               'cost': 0.11347517730496459,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaa894a90>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab05ae640>,
               'model_id': 5,
               'rank': 24,
               'sklearn_classifier': BernoulliNB(alpha=0.010232681621243814)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad8933a0>,
               'cost': 0.049645390070921946,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad2ef070>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad893040>,
               'model_id': 6,
               'rank': 11,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=1.3202262453017803e-05)},
        7: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab4282e0>,
               'cost': 0.099290780141844,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabf3ab20>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab41df10>,
               'model_id': 7,
               'rank': 22,
               'sklearn_classifier': BernoulliNB(alpha=8.843515731149308)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab48ea00>,
               'cost': 0.5957446808510638,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabf92580>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab48e610>,
               'model_id': 9,
               'rank': 25,
               'sklearn_classifier': BernoulliNB(alpha=0.04662763358613446, fit_prior=False)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab15059d0>,
                'cost': 0.007092198581560294,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab0bf1a30>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaaa25a60>,
                'model_id': 10,
                'rank': 1,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.45597150689539434)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac25f670>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab049a910>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab1099700>,
                'model_id': 11,
                'rank': 2,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.0995499108996053)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaaa4676a0>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaab62fa00>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab1ffd00>,
                'model_id': 12,
                'rank': 12,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.014034416932373166)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaacfedeb0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaa7abd60>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaacfedd30>,
                'model_id': 14,
                'rank': 15,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.035543606049804645)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac45da00>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac452310>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac45df10>,
                'model_id': 15,
                'rank': 3,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.0004981675590462134)},
        16: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad378b80>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab003ddc0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad378670>,
                'model_id': 16,
                'rank': 19,
                'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=1, min_samples_leaf=8,
                           min_samples_split=9, random_state=1)},
        17: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaabb20760>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad1952e0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaabb203a0>,
                'model_id': 17,
                'rank': 10,
                'sklearn_classifier': LinearSVC(C=64.64437157661465, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.013399889539803811)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad91c880>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab0d86880>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac2aab50>,
                'model_id': 18,
                'rank': 23,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.114391364050916, max_iter=128, random_state=1,
                                tol=1.3440590734654458e-05, warm_start=True)},
        19: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaaade22e0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaab920c70>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaade2040>,
                'model_id': 19,
                'rank': 8,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.01667385805274091)},
        20: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad423610>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaacffa490>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad442b20>,
                'model_id': 20,
                'rank': 5,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.009193751229756911,
                                   learning_rate=0.6836522210129492, max_iter=32,
                                   max_leaf_nodes=828, min_samples_leaf=3,
                                   n_iter_no_change=6, random_state=1,
                                   validation_fraction=0.28817393948552533,
                                   warm_start=True)},
        21: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad553430>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad63a820>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab16e45b0>,
                'model_id': 21,
                'rank': 6,
                'sklearn_classifier': LinearSVC(C=2.285306370007781, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.005821344021856017)},
        22: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad28d430>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaa9f49e80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab48b2dc0>,
                'model_id': 22,
                'rank': 16,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=4.421745686388317e-05, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(36, 36, 36),
                  learning_rate_init=0.0005485701552075967, max_iter=128,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        23: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab02041f0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaacfe88e0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad553a60>,
                'model_id': 23,
                'rank': 17,
                'sklearn_classifier': MLPClassifier(alpha=1.4882838781863932e-06, beta_1=0.999, beta_2=0.9,
                  hidden_layer_sizes=(23, 23),
                  learning_rate_init=0.06290764761689913, max_iter=128,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        25: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac0544c0>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad41fe50>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab84a3d0>,
                'model_id': 25,
                'rank': 20,
                'sklearn_classifier': PassiveAggressiveClassifier(C=1.4622203211010016e-05, average=True,
                                max_iter=128, random_state=1,
                                tol=0.0017964371726429177, warm_start=True)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaaaa25fa0>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabb4c910>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab0204e50>,
                'model_id': 26,
                'rank': 18,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=8),
                       learning_rate=1.6587261797143242, n_estimators=368,
                       random_state=1)},
        27: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac054d00>,
                'cost': 0.09219858156028371,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac45d2b0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac0542e0>,
                'model_id': 27,
                'rank': 21,
                'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_leaf=18,
                           min_samples_split=8, random_state=1)},
        29: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab686eb0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab48fc2b0>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab6868b0>,
                'model_id': 29,
                'rank': 9,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.23910875621465733)},
        30: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaabb4c220>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac675970>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab08cf340>,
                'model_id': 30,
                'rank': 7,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=1,
                           min_samples_leaf=10, min_samples_split=18,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        31: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaa9f5a7f0>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabd33be0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaa9f5a160>,
                'model_id': 31,
                'rank': 13,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.018038793247120707)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.992908
      Number of target algorithm runs: 32
      Number of successful target algorithm runs: 30
      Number of crashed target algorithm runs: 1
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 88-90

Fit a classifier using Random Search
====================================

.. GENERATED FROM PYTHON SOURCE LINES 90-141

.. code-block:: default

    def get_random_search_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client
    ):
        """ Random search """

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError("Please make sure to guard the code invoking Auto-sklearn by "
                             "`if __name__ == '__main__'` and remove this exception.")

        scenario_dict['minR'] = len(scenario_dict['instances'])
        scenario_dict['initial_incumbent'] = 'RANDOM'
        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder='/tmp/autosklearn_random_search_example_tmp',
        initial_configurations_via_metalearning=0,
        # Passing the callback to get the SMAC object
        get_smac_object_callback=get_random_search_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    print('#' * 80)
    print('Results for random search.')

    # Print the final ensemble constructed by auto-sklearn via random search.
    pprint(automl.show_models(), indent=4)

    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())

    predictions = automl.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Results for random search.
    {   3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab06ae520>,
               'cost': 0.05673758865248224,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad63a220>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab06beb80>,
               'model_id': 3,
               'rank': 14,
               'sklearn_classifier': MLPClassifier(alpha=1.0400632553169558e-07, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.0018475934154961215, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab0d55dc0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac4dc670>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab0d55ee0>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab45e3a0>,
               'cost': 0.11347517730496459,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab15a51f0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaa605d60>,
               'model_id': 5,
               'rank': 24,
               'sklearn_classifier': BernoulliNB(alpha=0.010232681621243814)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac25f2e0>,
               'cost': 0.049645390070921946,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad87c0d0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac25fbe0>,
               'model_id': 6,
               'rank': 11,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=1.3202262453017803e-05)},
        7: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab6cda00>,
               'cost': 0.099290780141844,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaa018940>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab6cd670>,
               'model_id': 7,
               'rank': 22,
               'sklearn_classifier': BernoulliNB(alpha=8.843515731149308)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaaa887160>,
               'cost': 0.5957446808510638,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaac99ca0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaa88fd30>,
               'model_id': 9,
               'rank': 25,
               'sklearn_classifier': BernoulliNB(alpha=0.04662763358613446, fit_prior=False)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac037be0>,
                'cost': 0.007092198581560294,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac554790>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac037e20>,
                'model_id': 10,
                'rank': 1,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.45597150689539434)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab330dd00>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab4c94340>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac554b50>,
                'model_id': 11,
                'rank': 2,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.0995499108996053)},
        12: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaaaa25340>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab1a86580>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaaa25b20>,
                'model_id': 12,
                'rank': 12,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.014034416932373166)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad375220>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab0204e80>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad36ee50>,
                'model_id': 14,
                'rank': 15,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.035543606049804645)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaac2f8370>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaac0379d0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac30c2b0>,
                'model_id': 15,
                'rank': 3,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.0004981675590462134)},
        16: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab170bbe0>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaab87ac10>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab170b790>,
                'model_id': 16,
                'rank': 19,
                'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=1, min_samples_leaf=8,
                           min_samples_split=9, random_state=1)},
        17: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaacd10310>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab48c8550>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaacd104c0>,
                'model_id': 17,
                'rank': 10,
                'sklearn_classifier': LinearSVC(C=64.64437157661465, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.013399889539803811)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaabaebfa0>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaa3eb430>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaabaeb2b0>,
                'model_id': 18,
                'rank': 23,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.114391364050916, max_iter=128, random_state=1,
                                tol=1.3440590734654458e-05, warm_start=True)},
        19: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaad58b7c0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabb738e0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad58b310>,
                'model_id': 19,
                'rank': 8,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.01667385805274091)},
        20: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaabf572e0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab18b82e0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaad378be0>,
                'model_id': 20,
                'rank': 5,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.009193751229756911,
                                   learning_rate=0.6836522210129492, max_iter=32,
                                   max_leaf_nodes=828, min_samples_leaf=3,
                                   n_iter_no_change=6, random_state=1,
                                   validation_fraction=0.28817393948552533,
                                   warm_start=True)},
        21: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaacb1e4f0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab0d5bee0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faab0d94220>,
                'model_id': 21,
                'rank': 6,
                'sklearn_classifier': LinearSVC(C=2.285306370007781, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.005821344021856017)},
        22: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab87f2b0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaae73c70>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab890f70>,
                'model_id': 22,
                'rank': 16,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=4.421745686388317e-05, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(36, 36, 36),
                  learning_rate_init=0.0005485701552075967, max_iter=128,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        23: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab5492e0>,
                'cost': 0.05673758865248224,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaaa286d0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac67bd90>,
                'model_id': 23,
                'rank': 17,
                'sklearn_classifier': MLPClassifier(alpha=1.4882838781863932e-06, beta_1=0.999, beta_2=0.9,
                  hidden_layer_sizes=(23, 23),
                  learning_rate_init=0.06290764761689913, max_iter=128,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        25: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab854be0>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaab67b1f0>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac1e7340>,
                'model_id': 25,
                'rank': 20,
                'sklearn_classifier': PassiveAggressiveClassifier(C=1.4622203211010016e-05, average=True,
                                max_iter=128, random_state=1,
                                tol=0.0017964371726429177, warm_start=True)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab5496d0>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabb08610>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab549580>,
                'model_id': 26,
                'rank': 18,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=8),
                       learning_rate=1.6587261797143242, n_estimators=368,
                       random_state=1)},
        27: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faaab835460>,
                'cost': 0.09219858156028371,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaaad95370>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaab854a00>,
                'model_id': 27,
                'rank': 21,
                'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_leaf=18,
                           min_samples_split=8, random_state=1)},
        29: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab022e490>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faab47eb670>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaacab98e0>,
                'model_id': 29,
                'rank': 9,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.23910875621465733)},
        30: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab003d250>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaad70bd60>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaac402f40>,
                'model_id': 30,
                'rank': 7,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=1,
                           min_samples_leaf=10, min_samples_split=18,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        31: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7faab0d82760>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7faaabc68d00>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7faaaff3bcd0>,
                'model_id': 31,
                'rank': 13,
                'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.018038793247120707)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.992908
      Number of target algorithm runs: 32
      Number of successful target algorithm runs: 30
      Number of crashed target algorithm runs: 1
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  52.415 seconds)


.. _sphx_glr_download_examples_60_search_example_random_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_random_search.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_random_search.py <example_random_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_random_search.ipynb <example_random_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
