
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_random_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_random_search.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_random_search.py:


=============
Random Search
=============

A crucial feature of *auto-sklearn* is automatically optimizing the hyperparameters through SMAC,
introduced `here <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_.
Additionally, it is possible to use
`random search <https://www.jmlr.org/papers/v13/bergstra12a.html>`_ instead of
SMAC, as demonstrated in the example below. Furthermore, the example also demonstrates how to use
`Random Online Aggressive Racing (ROAR) <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_
as yet another alternative optimizatino strategy.
Both examples are intended to show how the optimization strategy in *auto-sklearn* can be adapted.

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from smac.facade.roar_facade import ROAR
    from smac.scenario.scenario import Scenario

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 28-30

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )









.. GENERATED FROM PYTHON SOURCE LINES 38-40

Fit a classifier using ROAR
===========================

.. GENERATED FROM PYTHON SOURCE LINES 40-90

.. code-block:: default

    def get_roar_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
    ):
        """Random online adaptive racing."""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # The callback to get the SMAC object
        get_smac_object_callback=get_roar_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for ROAR.")
    # Print the final ensemble constructed by auto-sklearn via ROAR.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Results for ROAR.
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb477ff0610>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4683ccfa0>,
               'ensemble_weight': 0.16,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb4686f8df0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb470688220>,
               'cost': 0.35460992907801414,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb45aa23610>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb470688070>,
               'model_id': 5,
               'rank': 15,
               'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.021911463774943303)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb470db02e0>,
               'cost': 0.09219858156028371,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4704e5f10>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb470db0190>,
               'model_id': 8,
               'rank': 10,
               'sklearn_classifier': SGDClassifier(alpha=3.928652110322689e-07, average=True, eta0=0.01,
                  loss='perceptron', max_iter=32, random_state=1,
                  tol=0.07048515495757227, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45ac1eb20>,
               'cost': 0.07092198581560283,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb474605310>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45ac1ea30>,
               'model_id': 9,
               'rank': 9,
               'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=5, min_samples_split=15,
                           random_state=1)},
        11: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb47358faf0>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47375a160>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb47358f880>,
                'model_id': 11,
                'rank': 4,
                'sklearn_classifier': GaussianNB()},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45aa3b0a0>,
                'cost': 0.09219858156028371,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4708ae280>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb4706181c0>,
                'model_id': 13,
                'rank': 11,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=1, min_samples_leaf=11,
                         min_samples_split=3, n_estimators=512, n_jobs=1,
                         random_state=1, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4781fb760>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4780eb1f0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46fb36760>,
                'model_id': 14,
                'rank': 3,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.01218433743332879, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(17,),
                  learning_rate_init=0.0010483033340963766, max_iter=256,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4709c96a0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb476874b80>,
                'ensemble_weight': 0.18,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb470c906d0>,
                'model_id': 15,
                'rank': 2,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.4640751650555407)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb470c63ac0>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb473a55580>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb468236880>,
                'model_id': 16,
                'rank': 5,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=2,
                           min_samples_leaf=13, min_samples_split=17,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4684bbe20>,
                'cost': 0.17021276595744683,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46fbacb50>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46fc43940>,
                'model_id': 17,
                'rank': 13,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                           min_samples_leaf=19, min_samples_split=11,
                           random_state=1)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4680495e0>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46fc240a0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb468049370>,
                'model_id': 18,
                'rank': 14,
                'sklearn_classifier': BernoulliNB(alpha=0.056939256421569495, fit_prior=False)},
        19: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45abcda60>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb474f7ad90>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45abcd4f0>,
                'model_id': 19,
                'rank': 6,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=7),
                       learning_rate=1.7239051930772964, n_estimators=481,
                       random_state=1)},
        20: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb46f2f0b20>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47805bb20>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46f2f0970>,
                'model_id': 20,
                'rank': 8,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.09204807579971376, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(23, 23, 23),
                  learning_rate_init=0.01955062623328335, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45ac47970>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4705d5340>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45ac47760>,
                'model_id': 21,
                'rank': 12,
                'sklearn_classifier': SGDClassifier(alpha=0.06783794083532188, average=True,
                  epsilon=1.274401277740673e-05, eta0=3.846000183255324e-05,
                  learning_rate='constant', loss='modified_huber', max_iter=16,
                  random_state=1, tol=0.03703534699087739, warm_start=True)},
        22: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb468202d30>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb473d1ad30>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb468202b50>,
                'model_id': 22,
                'rank': 7,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=7),
                       learning_rate=0.15335200134018653, n_estimators=376,
                       random_state=1)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971631
      Number of target algorithm runs: 22
      Number of successful target algorithm runs: 19
      Number of crashed target algorithm runs: 2
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Fit a classifier using Random Search
====================================

.. GENERATED FROM PYTHON SOURCE LINES 93-140

.. code-block:: default

    def get_random_search_object_callback(
        scenario_dict, seed, ta, ta_kwargs, metalearning_configurations, n_jobs, dask_client
    ):
        """Random search"""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario_dict["minR"] = len(scenario_dict["instances"])
        scenario_dict["initial_incumbent"] = "RANDOM"
        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # Passing the callback to get the SMAC object
        get_smac_object_callback=get_random_search_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for random search.")

    # Print the final ensemble constructed by auto-sklearn via random search.
    pprint(automl.show_models(), indent=4)

    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())

    predictions = automl.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Results for random search.
    {   4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45af45970>,
               'cost': 0.35460992907801414,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47825d220>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45af457c0>,
               'model_id': 4,
               'rank': 15,
               'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.021911463774943303)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4748d16d0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4708b1970>,
               'ensemble_weight': 0.16,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46f2f0e20>,
               'model_id': 5,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4706498e0>,
               'cost': 0.09219858156028371,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47094c460>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb470649790>,
               'model_id': 8,
               'rank': 10,
               'sklearn_classifier': SGDClassifier(alpha=3.928652110322689e-07, average=True, eta0=0.01,
                  loss='perceptron', max_iter=32, random_state=1,
                  tol=0.07048515495757227, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb46f2f61f0>,
               'cost': 0.07092198581560283,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4709c2d90>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46f2f6100>,
               'model_id': 9,
               'rank': 9,
               'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=5, min_samples_split=15,
                           random_state=1)},
        11: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4740aab20>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46f2f0340>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb4740aad30>,
                'model_id': 11,
                'rank': 4,
                'sklearn_classifier': GaussianNB()},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb474121190>,
                'cost': 0.09219858156028371,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46f46f880>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45a9487c0>,
                'model_id': 13,
                'rank': 11,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=1, min_samples_leaf=11,
                         min_samples_split=3, n_estimators=512, n_jobs=1,
                         random_state=1, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb47382e910>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4708b5610>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb47382e100>,
                'model_id': 14,
                'rank': 3,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.01218433743332879, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(17,),
                  learning_rate_init=0.0010483033340963766, max_iter=256,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb473751730>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb4735129d0>,
                'ensemble_weight': 0.18,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46f3028b0>,
                'model_id': 15,
                'rank': 2,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.4640751650555407)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb46fb635e0>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb473d0da60>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb4768a26a0>,
                'model_id': 16,
                'rank': 5,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=2,
                           min_samples_leaf=13, min_samples_split=17,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb468c57670>,
                'cost': 0.17021276595744683,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb470554190>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb474985220>,
                'model_id': 17,
                'rank': 13,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                           min_samples_leaf=19, min_samples_split=11,
                           random_state=1)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb470291d30>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46fc166a0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb470291ac0>,
                'model_id': 18,
                'rank': 14,
                'sklearn_classifier': BernoulliNB(alpha=0.056939256421569495, fit_prior=False)},
        19: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb474f872b0>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47325d790>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb46f3d2670>,
                'model_id': 19,
                'rank': 6,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=7),
                       learning_rate=1.7239051930772964, n_estimators=481,
                       random_state=1)},
        20: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb45afe9280>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb47356a1f0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb45afe90d0>,
                'model_id': 20,
                'rank': 8,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.09204807579971376, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(23, 23, 23),
                  learning_rate_init=0.01955062623328335, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4735b02e0>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb46f196a60>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb473035e20>,
                'model_id': 21,
                'rank': 12,
                'sklearn_classifier': SGDClassifier(alpha=0.06783794083532188, average=True,
                  epsilon=1.274401277740673e-05, eta0=3.846000183255324e-05,
                  learning_rate='constant', loss='modified_huber', max_iter=16,
                  random_state=1, tol=0.03703534699087739, warm_start=True)},
        22: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb4686f8d30>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb470e1f2e0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb4686f8490>,
                'model_id': 22,
                'rank': 7,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=7),
                       learning_rate=0.15335200134018653, n_estimators=376,
                       random_state=1)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971631
      Number of target algorithm runs: 22
      Number of successful target algorithm runs: 19
      Number of crashed target algorithm runs: 2
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  56.144 seconds)


.. _sphx_glr_download_examples_60_search_example_random_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_random_search.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_random_search.py <example_random_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_random_search.ipynb <example_random_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
