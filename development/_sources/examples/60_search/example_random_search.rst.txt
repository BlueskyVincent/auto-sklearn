
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_random_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_random_search.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_random_search.py:


=============
Random Search
=============

A crucial feature of *auto-sklearn* is automatically optimizing the hyperparameters through SMAC,
introduced `here <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_.
Additionally, it is possible to use
`random search <https://www.jmlr.org/papers/v13/bergstra12a.html>`_ instead of
SMAC, as demonstrated in the example below. Furthermore, the example also demonstrates how to use
`Random Online Aggressive Racing (ROAR) <https://ml.informatik.uni-freiburg.de/papers/11-LION5-SMAC.pdf>`_
as yet another alternative optimizatino strategy.
Both examples are intended to show how the optimization strategy in *auto-sklearn* can be adapted.

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from smac.facade.roar_facade import ROAR
    from smac.scenario.scenario import Scenario

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 28-30

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )









.. GENERATED FROM PYTHON SOURCE LINES 38-40

Fit a classifier using ROAR
===========================

.. GENERATED FROM PYTHON SOURCE LINES 40-92

.. code-block:: default

    def get_roar_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
        multi_objective_algorithm,  # This argument will be ignored as ROAR does not yet support multi-objective optimization
        multi_objective_kwargs,
    ):
        """Random online adaptive racing."""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # The callback to get the SMAC object
        get_smac_object_callback=get_roar_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for ROAR.")
    # Print the final ensemble constructed by auto-sklearn via ROAR.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ################################################################################
    Results for ROAR.
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869b70a100>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8695a28400>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869b70adf0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869dcadc10>,
               'cost': 0.07092198581560283,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8696c560d0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869dcaddf0>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.10318256510142626, average=True, max_iter=32,
                                random_state=1, tol=0.0013607858153657413,
                                warm_start=True)},
        4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f86958353a0>,
               'cost': 0.08510638297872342,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b19a970>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869d90cdf0>,
               'model_id': 4,
               'rank': 3,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.000505280701827856, max_iter=32, random_state=1,
                                tol=0.06421873693006744, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f868871f9a0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869a985eb0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f868871f3a0>,
               'model_id': 5,
               'rank': 4,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=1.4469619760002166e-09,
                                   learning_rate=0.12309321429220763, max_iter=256,
                                   max_leaf_nodes=10, min_samples_leaf=17,
                                   n_iter_no_change=16, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8693cfc490>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f86b18138b0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8693cfc700>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.08622878828999171)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869daf9820>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8695af5760>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8683072f40>,
               'model_id': 8,
               'rank': 6,
               'sklearn_classifier': PassiveAggressiveClassifier(C=5.4951544593926646e-05, average=True, max_iter=16,
                                random_state=1, tol=0.012344344043531127,
                                warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869ad58af0>,
               'cost': 0.12056737588652477,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869afa4400>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f868d70d430>,
               'model_id': 9,
               'rank': 7,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.09581923415311244, max_iter=64, random_state=1,
                                tol=0.000145918046557035, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869af5c400>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f86916692e0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f86939933d0>,
                'model_id': 10,
                'rank': 8,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=2, min_samples_leaf=11,
                         min_samples_split=19, n_estimators=512, n_jobs=1,
                         random_state=1, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8696c9ceb0>,
                'cost': 0.36879432624113473,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b0973d0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869db47c10>,
                'model_id': 13,
                'rank': 9,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=1,
                         min_samples_leaf=20, min_samples_split=20,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869bb98790>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869afe9d00>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869daea3d0>,
                'model_id': 14,
                'rank': 10,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.013943862590174107)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869671d9d0>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869bf4c8b0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869aed6d90>,
                'model_id': 15,
                'rank': 11,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                           max_depth=1, min_samples_leaf=3, min_samples_split=13,
                           random_state=1)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869d99a3d0>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869d90c9a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8691d555e0>,
                'model_id': 16,
                'rank': 12,
                'sklearn_classifier': GaussianNB()},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8695827280>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8696223fd0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869daa8910>,
                'model_id': 17,
                'rank': 13,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.04885675602027957, average=True, max_iter=64,
                                random_state=1, tol=0.0002678322187543955,
                                warm_start=True)},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869dcb77f0>,
                'cost': 0.1063829787234043,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869dcfb520>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869dcb7e80>,
                'model_id': 18,
                'rank': 14,
                'sklearn_classifier': SGDClassifier(alpha=0.0002548862311968591, average=True,
                  eta0=4.278565071229579e-05, learning_rate='constant',
                  loss='squared_hinge', max_iter=1024, random_state=1,
                  tol=5.482673674397374e-05, warm_start=True)},
        20: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869158e6a0>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8696e09640>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869158ecd0>,
                'model_id': 20,
                'rank': 15,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=9),
                       learning_rate=0.21684295401135145, n_estimators=72,
                       random_state=1)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f86b1546400>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8694485490>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f86b1546eb0>,
                'model_id': 21,
                'rank': 16,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=4, min_samples_split=18,
                           random_state=1)},
        23: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869bdbcac0>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8696dfce50>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8695b01e50>,
                'model_id': 23,
                'rank': 17,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.02522490081077779, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.026536043936270744, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869af58610>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8695b5c5b0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869af49bb0>,
                'model_id': 26,
                'rank': 18,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=80, p=1)},
        28: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869682e130>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869bb13640>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8692bec2e0>,
                'model_id': 28,
                'rank': 19,
                'sklearn_classifier': GaussianNB()},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8696c56790>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b592820>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8696c56370>,
                'model_id': 29,
                'rank': 20,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.08974262852727155, solver='lsqr',
                               tol=0.0053263194623885965)},
        32: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8692aa50a0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869aa705b0>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8692aa5af0>,
                'model_id': 32,
                'rank': 21,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=9,
                           min_samples_leaf=2, min_samples_split=16,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        34: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869b046c40>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869130ed30>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869b4854c0>,
                'model_id': 34,
                'rank': 22,
                'sklearn_classifier': LinearSVC(C=0.20256270489527436, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.005370536020128705)},
        35: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869b55ab80>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b0348b0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869652d700>,
                'model_id': 35,
                'rank': 23,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9515650360549429)},
        36: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f86970911c0>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869ae71880>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869689ee20>,
                'model_id': 36,
                'rank': 24,
                'sklearn_classifier': DecisionTreeClassifier(max_depth=1, min_samples_leaf=17, min_samples_split=6,
                           random_state=1)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 35
      Number of successful target algorithm runs: 35
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.965034965034965




.. GENERATED FROM PYTHON SOURCE LINES 93-95

Fit a classifier using Random Search
====================================

.. GENERATED FROM PYTHON SOURCE LINES 95-150

.. code-block:: default

    def get_random_search_object_callback(
        scenario_dict,
        seed,
        ta,
        ta_kwargs,
        metalearning_configurations,
        n_jobs,
        dask_client,
        multi_objective_algorithm,  # This argument will be ignored as ROAR does not yet support multi-objective optimization
        multi_objective_kwargs,
    ):
        """Random search"""

        if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
            raise ValueError(
                "Please make sure to guard the code invoking Auto-sklearn by "
                "`if __name__ == '__main__'` and remove this exception."
            )

        scenario_dict["minR"] = len(scenario_dict["instances"])
        scenario_dict["initial_incumbent"] = "RANDOM"
        scenario = Scenario(scenario_dict)
        return ROAR(
            scenario=scenario,
            rng=seed,
            tae_runner=ta,
            tae_runner_kwargs=ta_kwargs,
            run_id=seed,
            dask_client=dask_client,
            n_jobs=n_jobs,
        )


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=15,
        tmp_folder="/tmp/autosklearn_random_search_example_tmp",
        initial_configurations_via_metalearning=0,
        # Passing the callback to get the SMAC object
        get_smac_object_callback=get_random_search_object_callback,
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")

    print("#" * 80)
    print("Results for random search.")

    # Print the final ensemble constructed by auto-sklearn via random search.
    pprint(automl.show_models(), indent=4)

    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())

    predictions = automl.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ################################################################################
    Results for random search.
    {   4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8695c9afd0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869652d3d0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8695c9a5e0>,
               'model_id': 4,
               'rank': 1,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=1.4469619760002166e-09,
                                   learning_rate=0.12309321429220763, max_iter=256,
                                   max_leaf_nodes=10, min_samples_leaf=17,
                                   n_iter_no_change=16, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869de5e9d0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869c243df0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869de5ee20>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869af58d90>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b55aeb0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869af58c40>,
               'model_id': 6,
               'rank': 3,
               'sklearn_classifier': LinearDiscriminantAnalysis(tol=0.08622878828999171)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f86958f31c0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869daf0040>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f86958f3610>,
               'model_id': 8,
               'rank': 4,
               'sklearn_classifier': PassiveAggressiveClassifier(C=5.4951544593926646e-05, average=True, max_iter=16,
                                random_state=1, tol=0.012344344043531127,
                                warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869aa0fa90>,
               'cost': 0.12056737588652477,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f86968c9b20>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869aa0fe80>,
               'model_id': 9,
               'rank': 5,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.09581923415311244, max_iter=64, random_state=1,
                                tol=0.000145918046557035, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869b4859d0>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869dab6c10>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8693a2daf0>,
                'model_id': 10,
                'rank': 6,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=2, min_samples_leaf=11,
                         min_samples_split=19, n_estimators=512, n_jobs=1,
                         random_state=1, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8696dfc880>,
                'cost': 0.36879432624113473,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8692a75280>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8696dfc250>,
                'model_id': 13,
                'rank': 7,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=1,
                         min_samples_leaf=20, min_samples_split=20,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8691d55400>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869600aa00>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8691d55580>,
                'model_id': 14,
                'rank': 8,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage='auto', solver='lsqr',
                               tol=0.013943862590174107)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8696e038e0>,
                'cost': 0.16312056737588654,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8695c9a640>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869bddf190>,
                'model_id': 15,
                'rank': 9,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                           max_depth=1, min_samples_leaf=3, min_samples_split=13,
                           random_state=1)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869afeb760>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f86958e66d0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869afeb7f0>,
                'model_id': 16,
                'rank': 10,
                'sklearn_classifier': GaussianNB()},
        18: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8693993250>,
                'cost': 0.1063829787234043,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869df745e0>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8693993a30>,
                'model_id': 18,
                'rank': 11,
                'sklearn_classifier': SGDClassifier(alpha=0.0002548862311968591, average=True,
                  eta0=4.278565071229579e-05, learning_rate='constant',
                  loss='squared_hinge', max_iter=1024, random_state=1,
                  tol=5.482673674397374e-05, warm_start=True)},
        20: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869e2df820>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869a9dbac0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869ad589a0>,
                'model_id': 20,
                'rank': 12,
                'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                       base_estimator=DecisionTreeClassifier(max_depth=9),
                       learning_rate=0.21684295401135145, n_estimators=72,
                       random_state=1)},
        21: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869b5ffa60>,
                'cost': 0.24113475177304966,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869ae83970>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869b5ff940>,
                'model_id': 21,
                'rank': 13,
                'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=30,
                           min_samples_leaf=4, min_samples_split=18,
                           random_state=1)},
        23: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869afa4e80>,
                'cost': 0.07801418439716312,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b2a0700>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869afa4490>,
                'model_id': 23,
                'rank': 14,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.02522490081077779, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(35,),
                  learning_rate_init=0.026536043936270744, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        25: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869bb051c0>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b3793d0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869d985c40>,
                'model_id': 25,
                'rank': 15,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.1928852428306468e-08,
                                   learning_rate=0.29557366541255203, max_iter=64,
                                   max_leaf_nodes=70, min_samples_leaf=24,
                                   random_state=1,
                                   validation_fraction=0.13252036572629863,
                                   warm_start=True)},
        26: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869bd9edc0>,
                'cost': 0.08510638297872342,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b07c550>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869a892d60>,
                'model_id': 26,
                'rank': 16,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=80, p=1)},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8696a47d60>,
                'cost': 0.014184397163120588,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869adc1190>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8695b5cdc0>,
                'model_id': 29,
                'rank': 17,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.08974262852727155, solver='lsqr',
                               tol=0.0053263194623885965)},
        30: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8692dc5fa0>,
                'cost': 0.14893617021276595,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b3b1310>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8692dc5250>,
                'model_id': 30,
                'rank': 18,
                'sklearn_classifier': BernoulliNB(alpha=87.79995280990563)},
        32: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f869a985d30>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f86958e6bb0>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869a985970>,
                'model_id': 32,
                'rank': 19,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=9,
                           min_samples_leaf=2, min_samples_split=16,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        34: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8692aa5fd0>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869b510490>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f8692aa5760>,
                'model_id': 34,
                'rank': 20,
                'sklearn_classifier': LinearSVC(C=0.20256270489527436, dual=False, intercept_scaling=1.0,
              random_state=1, tol=0.005370536020128705)},
        35: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f86b17c56a0>,
                'cost': 0.04255319148936165,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f868871fa00>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f869d90cb80>,
                'model_id': 35,
                'rank': 21,
                'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9515650360549429)},
        36: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f8692bdb4c0>,
                'cost': 0.06382978723404253,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f869be78b80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f86969fc820>,
                'model_id': 36,
                'rank': 22,
                'sklearn_classifier': DecisionTreeClassifier(max_depth=1, min_samples_leaf=17, min_samples_split=6,
                           random_state=1)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 35
      Number of successful target algorithm runs: 35
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.965034965034965





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  50.850 seconds)


.. _sphx_glr_download_examples_60_search_example_random_search.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/development?urlpath=lab/tree/notebooks/examples/60_search/example_random_search.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_random_search.py <example_random_search.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_random_search.ipynb <example_random_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
