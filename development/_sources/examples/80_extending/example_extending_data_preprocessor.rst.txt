
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/80_extending/example_extending_data_preprocessor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_80_extending_example_extending_data_preprocessor.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_80_extending_example_extending_data_preprocessor.py:


=======================================================
Extending Auto-Sklearn with Data Preprocessor Component
=======================================================

The following example demonstrates how to turn off data preprocessing step in auto-skearn.

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: default


    import autosklearn.classification
    import autosklearn.pipeline.components.data_preprocessing
    import sklearn.metrics
    from ConfigSpace.configuration_space import ConfigurationSpace
    from autosklearn.pipeline.components.base import AutoSklearnPreprocessingAlgorithm
    from autosklearn.pipeline.constants import SPARSE, DENSE, UNSIGNED_DATA, INPUT
    from sklearn.datasets import load_breast_cancer
    from sklearn.model_selection import train_test_split









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Create NoPreprocessing component for auto-sklearn
=================================================

.. GENERATED FROM PYTHON SOURCE LINES 22-59

.. code-block:: default

    class NoPreprocessing(AutoSklearnPreprocessingAlgorithm):

        def __init__(self, **kwargs):
            """ This preprocessors does not change the data """
            # Some internal checks makes sure parameters are set
            for key, val in kwargs.items():
                setattr(self, key, val)

        def fit(self, X, Y=None):
            return self

        def transform(self, X):
            return X

        @staticmethod
        def get_properties(dataset_properties=None):
            return {
                'shortname': 'NoPreprocessing',
                'name': 'NoPreprocessing',
                'handles_regression': True,
                'handles_classification': True,
                'handles_multiclass': True,
                'handles_multilabel': True,
                'handles_multioutput': True,
                'is_deterministic': True,
                'input': (SPARSE, DENSE, UNSIGNED_DATA),
                'output': (INPUT,)
            }

        @staticmethod
        def get_hyperparameter_search_space(dataset_properties=None):
            return ConfigurationSpace()  # Return an empty configuration as there is None


    # Add NoPreprocessing component to auto-sklearn.
    autosklearn.pipeline.components.data_preprocessing.add_preprocessor(NoPreprocessing)








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Create dataset
==============

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default


    X, y = load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y)








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Fit the model without performing data preprocessing
===================================================

.. GENERATED FROM PYTHON SOURCE LINES 69-86

.. code-block:: default


    clf = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=120,
        include={
            'data_preprocessor': ['NoPreprocessing']
        },
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 5},
    )
    clf.fit(X_train, y_train)

    # To check that models were found without issue when running examples
    assert len(clf.get_models_with_weights()) > 0
    print(clf.sprint_statistics())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    auto-sklearn results:
      Dataset name: d31cfe3e-5285-11ec-867a-b7e09c96a597
      Metric: accuracy
      Best validation score: 0.936170
      Number of target algorithm runs: 5
      Number of successful target algorithm runs: 5
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0





.. GENERATED FROM PYTHON SOURCE LINES 87-89

Print prediction score and statistics
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: default


    y_pred = clf.predict(X_test)
    print("accuracy: ", sklearn.metrics.accuracy_score(y_pred, y_test))
    print(clf.show_models())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    accuracy:  0.9370629370629371
    [(0.880000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'passive_aggressive', 'data_preprocessor:__choice__': 'NoPreprocessing', 'feature_preprocessor:__choice__': 'kernel_pca', 'classifier:passive_aggressive:C': 7.328568999403367e-05, 'classifier:passive_aggressive:average': 'False', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'hinge', 'classifier:passive_aggressive:tol': 0.02258105767523384, 'feature_preprocessor:kernel_pca:kernel': 'cosine', 'feature_preprocessor:kernel_pca:n_components': 503},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.080000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessor:__choice__': 'NoPreprocessing', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.040000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'adaboost', 'data_preprocessor:__choice__': 'NoPreprocessing', 'feature_preprocessor:__choice__': 'liblinear_svc_preprocessor', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 1.077525751047041, 'classifier:adaboost:max_depth': 9, 'classifier:adaboost:n_estimators': 208, 'feature_preprocessor:liblinear_svc_preprocessor:C': 1202.4376014010597, 'feature_preprocessor:liblinear_svc_preprocessor:dual': 'False', 'feature_preprocessor:liblinear_svc_preprocessor:fit_intercept': 'True', 'feature_preprocessor:liblinear_svc_preprocessor:intercept_scaling': 1, 'feature_preprocessor:liblinear_svc_preprocessor:loss': 'squared_hinge', 'feature_preprocessor:liblinear_svc_preprocessor:multi_class': 'ovr', 'feature_preprocessor:liblinear_svc_preprocessor:penalty': 'l1', 'feature_preprocessor:liblinear_svc_preprocessor:tol': 8.931650858806469e-05},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.556 seconds)


.. _sphx_glr_download_examples_80_extending_example_extending_data_preprocessor.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/80_extending/example_extending_data_preprocessor.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_extending_data_preprocessor.py <example_extending_data_preprocessor.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_extending_data_preprocessor.ipynb <example_extending_data_preprocessor.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
