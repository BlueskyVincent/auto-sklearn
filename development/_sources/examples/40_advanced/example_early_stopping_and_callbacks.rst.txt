
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_early_stopping_and_callbacks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_early_stopping_and_callbacks.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_early_stopping_and_callbacks.py:


============================
Early stopping and Callbacks
============================

The example below shows how we can use the ``get_trials_callback`` parameter of
auto-sklearn to implement an early-stopping mechanism through a callback.

These callbacks give access to the result of each model + hyperparameter configuration
optimized by SMAC, the underlying optimizer for autosklearn. By checking the cost of
a result, we can implement a simple yet effective early stopping mechanism!

Do note however, this does not provide any access to the ensembles that autosklearn
produces, only the individual models. You may wish to perform a more sophisticated
early stopping mechanism such that there are enough good models for autosklearn to build
and ensemble with. This is here to provide a simple example.

.. GENERATED FROM PYTHON SOURCE LINES 18-31

.. code-block:: default

    from __future__ import annotations

    from pprint import pprint

    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification

    from smac.optimizer.smbo import SMBO
    from smac.runhistory.runhistory import RunInfo, RunValue









.. GENERATED FROM PYTHON SOURCE LINES 32-34

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 34-64

.. code-block:: default

    def callback(
        smbo: SMBO,
        run_info: RunInfo,
        result: RunValue,
        time_left: float,
    ) -> bool | None:
        """Stop early if we get a very low cost value for a single run

        The return value indicates to SMAC whether to stop or not. False will
        stop the search process while any other value will mean it continues.
        """
        # You can find out the parameters in the SMAC documentation
        # https://automl.github.io/SMAC3/main/
        if result.cost <= 0.02:
            print("Stopping!")
            print(run_info)
            print(result)
            return False


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=120, per_run_time_limit=30, get_trials_callback=callback
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    AutoSklearnClassifier(ensemble_class=<class 'autosklearn.ensembles.ensemble_selection.EnsembleSelection'>,
                          get_trials_callback=<function callback at 0x7fcaac3a5b80>,
                          per_run_time_limit=30, time_left_for_this_task=120)



.. GENERATED FROM PYTHON SOURCE LINES 65-67

View the models found by auto-sklearn
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default


    print(automl.leaderboard())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              rank  ensemble_weight                 type      cost  duration
    model_id                                                                
    2            1             0.08        random_forest  0.028369  1.907833
    10           2             0.02        random_forest  0.028369  2.091222
    28           3             0.02        random_forest  0.028369  2.532268
    29           4             0.04        random_forest  0.028369  2.209271
    38           6             0.04  k_nearest_neighbors  0.028369  1.209601
    41           5             0.12                  mlp  0.028369  1.149982
    5            7             0.04        random_forest  0.035461  2.222105
    8            8             0.04        random_forest  0.035461  2.190983
    18           9             0.04        random_forest  0.035461  2.215438
    31          11             0.06                  mlp  0.035461  1.350447
    39          10             0.14                  mlp  0.035461  3.481921
    30          12             0.02        liblinear_svc  0.049645  5.038784
    42          13             0.02          gaussian_nb  0.049645  0.980210
    24          15             0.04        random_forest  0.070922  1.926288
    33          14             0.04                  mlp  0.070922  1.538476
    35          16             0.12        random_forest  0.134752  2.129889
    37          17             0.12         bernoulli_nb  0.375887  0.917712




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac8b5fd0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcac2a53220>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac8b53a0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaacf61550>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaac846610>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad8aa370>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaabd06850>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaaca588b0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad38c0d0>,
               'model_id': 8,
               'rank': 3,
               'sklearn_classifier': RandomForestClassifier(max_features=2, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac9cd4c0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabb63310>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac9cdbe0>,
                'model_id': 10,
                'rank': 4,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, min_samples_split=6,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        18: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad8c7580>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabc36730>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaadc15be0>,
                'model_id': 18,
                'rank': 5,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        24: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaada75c10>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabac4e80>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac58dd00>,
                'model_id': 24,
                'rank': 6,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=16, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        28: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad290f70>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaadb7fe80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad290c70>,
                'model_id': 28,
                'rank': 7,
                'sklearn_classifier': RandomForestClassifier(max_features=17, min_samples_split=17, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac63b130>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaace5e6d0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaaced8d60>,
                'model_id': 29,
                'rank': 8,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=7,
                           min_samples_leaf=2, min_samples_split=15,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        30: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac528c10>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad8dcb20>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac528910>,
                'model_id': 30,
                'rank': 9,
                'sklearn_classifier': LinearSVC(C=10.441505929697795, dual=False, intercept_scaling=1.0,
              random_state=1, tol=9.270830299189037e-05)},
        31: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad162310>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaac5fe1c0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac90efa0>,
                'model_id': 31,
                'rank': 10,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0022527637678329674, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(229,),
                  learning_rate_init=0.0001162349903905135, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        33: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac4208b0>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad12efd0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaacded400>,
                'model_id': 33,
                'rank': 11,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.00284827062183016, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(208, 208),
                  learning_rate_init=0.004740724430708455, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        35: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac7c0400>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabb42520>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac810670>,
                'model_id': 35,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(max_features=43, min_samples_leaf=5, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        37: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad515b50>,
                'cost': 0.375886524822695,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabe88d60>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad5158b0>,
                'model_id': 37,
                'rank': 13,
                'sklearn_classifier': BernoulliNB(alpha=1.8375704754392488)},
        38: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac381d60>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad5e1ca0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac381ac0>,
                'model_id': 38,
                'rank': 14,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=6)},
        39: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac78ef70>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaac6f4b80>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac78e490>,
                'model_id': 39,
                'rank': 15,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=3.179679473358367e-05, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(22, 22, 22),
                  learning_rate_init=0.0006107350876720548, max_iter=64,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        41: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad01a520>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaabca7cd0>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad82e1f0>,
                'model_id': 41,
                'rank': 16,
                'sklearn_classifier': MLPClassifier(alpha=6.917679443816052e-05, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(25,),
                  learning_rate_init=0.0013686431060211742, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        42: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac9d63a0>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaaccee0a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac9d6d60>,
                'model_id': 42,
                'rank': 17,
                'sklearn_classifier': GaussianNB()}}




.. GENERATED FROM PYTHON SOURCE LINES 77-79

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score:", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy score: 0.958041958041958





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  57.743 seconds)


.. _sphx_glr_download_examples_40_advanced_example_early_stopping_and_callbacks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_early_stopping_and_callbacks.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_early_stopping_and_callbacks.py <example_early_stopping_and_callbacks.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_early_stopping_and_callbacks.ipynb <example_early_stopping_and_callbacks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
