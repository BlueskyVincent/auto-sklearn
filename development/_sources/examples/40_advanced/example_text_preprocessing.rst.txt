
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_text_preprocessing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_text_preprocessing.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_text_preprocessing.py:


==================
Text preprocessing
==================

The following example shows how to fit a simple NLP problem with
*auto-sklearn*.

For an introduction to text preprocessing you can follow these links:
    1. https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html
    2. https://machinelearningmastery.com/clean-text-machine-learning-python/

.. GENERATED FROM PYTHON SOURCE LINES 14-22

.. code-block:: default

    from pprint import pprint

    import pandas as pd
    import sklearn.metrics
    from sklearn.datasets import fetch_20newsgroups

    import autosklearn.classification








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 25-40

.. code-block:: default

    cats = ["comp.sys.ibm.pc.hardware", "rec.sport.baseball"]
    X_train, y_train = fetch_20newsgroups(
        subset="train",  # select train set
        shuffle=True,  # shuffle the data set for unbiased validation results
        random_state=42,  # set a random seed for reproducibility
        categories=cats,  # select only 2 out of 20 labels
        return_X_y=True,  # 20NG dataset consists of 2 columns X: the text data, y: the label
    )  # load this two columns separately as numpy array

    X_test, y_test = fetch_20newsgroups(
        subset="test",  # select test set for unbiased evaluation
        categories=cats,  # select only 2 out of 20 labels
        return_X_y=True,  # 20NG dataset consists of 2 columns X: the text data, y: the label
    )  # load this two columns separately as numpy array








.. GENERATED FROM PYTHON SOURCE LINES 41-47

Creating a pandas dataframe
===========================
Both categorical and text features are often strings. Python Pandas stores python stings
in the generic `object` type. Please ensure that the correct
`dtype <https://pandas.pydata.org/docs/user_guide/basics.html#dtypes>`_ is applied to the correct
column.

.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: default


    # create a pandas dataframe for training labeling the "Text" column as sting
    X_train = pd.DataFrame({"Text": pd.Series(X_train, dtype="string")})

    # create a pandas dataframe for testing labeling the "Text" column as sting
    X_test = pd.DataFrame({"Text": pd.Series(X_test, dtype="string")})








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 57-67

.. code-block:: default


    # create an autosklearn Classifier or Regressor depending on your task at hand.
    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        tmp_folder="/tmp/autosklearn_text_example_tmp",
    )

    automl.fit(X_train, y_train, dataset_name="20_Newsgroups")  # fit the automl model





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AutoSklearnClassifier(per_run_time_limit=30, time_left_for_this_task=60,
                          tmp_folder='/tmp/autosklearn_text_example_tmp')



.. GENERATED FROM PYTHON SOURCE LINES 68-70

View the models found by auto-sklearn
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default


    print(automl.leaderboard())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

              rank  ensemble_weight                 type      cost  duration
    model_id                                                                
    5            1             0.08                  mlp  0.040816  2.307228
    9            2             0.04                  mlp  0.056122  2.737555
    15           3             0.04    gradient_boosting  0.079082  4.448754
    10           4             0.14   passive_aggressive  0.081633  2.207763
    4            5             0.12          extra_trees  0.084184  3.447562
    12           6             0.20                  lda  0.099490  2.185762
    2            7             0.02        random_forest  0.102041  4.574531
    13           8             0.02                  mlp  0.109694  3.140663
    7            9             0.02        random_forest  0.130102  3.105375
    6           10             0.02                  qda  0.153061  2.115438
    11          11             0.02  k_nearest_neighbors  0.168367  2.179065
    8           12             0.28           libsvm_svc  0.369898  2.236252




.. GENERATED FROM PYTHON SOURCE LINES 74-76

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda77239a0>,
               'cost': 0.10204081632653061,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda76fbdc0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda76eac10>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=10, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda79d3c70>,
               'cost': 0.08418367346938771,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda76f3cd0>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda79d3700>,
               'model_id': 4,
               'rank': 2,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=4, n_estimators=512,
                         n_jobs=1, random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda90dd8e0>,
               'cost': 0.04081632653061229,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda76f3490>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda90ddcd0>,
               'model_id': 5,
               'rank': 3,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.05476322473700896, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(136,),
                  learning_rate_init=0.012698439797907473, max_iter=64,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda9157100>,
               'cost': 0.15306122448979587,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbdb0658310>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda8be1a00>,
               'model_id': 6,
               'rank': 4,
               'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.585497512341966)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda8d90f70>,
               'cost': 0.13010204081632648,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda7cb0e80>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda9074490>,
               'model_id': 7,
               'rank': 5,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=1, min_samples_leaf=5,
                           min_samples_split=11, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda6883ac0>,
               'cost': 0.3698979591836735,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda77f01f0>,
               'ensemble_weight': 0.28,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda6883c10>,
               'model_id': 8,
               'rank': 6,
               'sklearn_classifier': SVC(C=0.20435138760822585, cache_size=1780.9791666666667,
        class_weight='balanced', gamma=7.373654384480026e-05, max_iter=-1.0,
        random_state=1, tol=4.6066870756479984e-05)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda80f5370>,
               'cost': 0.056122448979591844,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda8437460>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda80f5220>,
               'model_id': 9,
               'rank': 7,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=1.0207902638359607e-07, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(229,),
                  learning_rate_init=0.0005867144594731152, max_iter=64,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda7ea79a0>,
                'cost': 0.08163265306122447,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda90d1490>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda7ea7730>,
                'model_id': 10,
                'rank': 8,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.14833233294431605, average=True,
                                loss='squared_hinge', max_iter=64, random_state=1,
                                tol=0.00016482166646253793, warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda6894040>,
                'cost': 0.16836734693877553,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda8d90160>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda687ce20>,
                'model_id': 11,
                'rank': 9,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=3, p=1, weights='distance')},
        12: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda7f2bc40>,
                'cost': 0.09948979591836737,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda8bf6fd0>,
                'ensemble_weight': 0.2,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda7f2baf0>,
                'model_id': 12,
                'rank': 10,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.3306135150299744, solver='lsqr',
                               tol=0.0007215763283486354)},
        13: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda8ca2520>,
                'cost': 0.10969387755102045,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda80f5a30>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda7eb3f10>,
                'model_id': 13,
                'rank': 11,
                'sklearn_classifier': MLPClassifier(alpha=0.003989533567739603, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(264, 264),
                  learning_rate_init=0.0009934511776384044, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbda773ae80>,
                'cost': 0.07908163265306123,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbda7ad3670>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbda773a040>,
                'model_id': 15,
                'rank': 12,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=512,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)}}




.. GENERATED FROM PYTHON SOURCE LINES 80-82

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score:", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score: 0.9632446134347274





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.833 seconds)


.. _sphx_glr_download_examples_40_advanced_example_text_preprocessing.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_text_preprocessing.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_text_preprocessing.py <example_text_preprocessing.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_text_preprocessing.ipynb <example_text_preprocessing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
