
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_text_preprocessing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_text_preprocessing.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_text_preprocessing.py:


==================
Text preprocessing
==================

The following example shows how to fit a simple NLP problem with
*auto-sklearn*.

For an introduction to text preprocessing you can follow these links:
    1. https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html
    2. https://machinelearningmastery.com/clean-text-machine-learning-python/

.. GENERATED FROM PYTHON SOURCE LINES 14-22

.. code-block:: default

    from pprint import pprint

    import pandas as pd
    import sklearn.metrics
    from sklearn.datasets import fetch_20newsgroups

    import autosklearn.classification








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 25-40

.. code-block:: default

    cats = ["comp.sys.ibm.pc.hardware", "rec.sport.baseball"]
    X_train, y_train = fetch_20newsgroups(
        subset="train",  # select train set
        shuffle=True,  # shuffle the data set for unbiased validation results
        random_state=42,  # set a random seed for reproducibility
        categories=cats,  # select only 2 out of 20 labels
        return_X_y=True,  # 20NG dataset consists of 2 columns X: the text data, y: the label
    )  # load this two columns separately as numpy array

    X_test, y_test = fetch_20newsgroups(
        subset="test",  # select test set for unbiased evaluation
        categories=cats,  # select only 2 out of 20 labels
        return_X_y=True,  # 20NG dataset consists of 2 columns X: the text data, y: the label
    )  # load this two columns separately as numpy array








.. GENERATED FROM PYTHON SOURCE LINES 41-47

Creating a pandas dataframe
===========================
Both categorical and text features are often strings. Python Pandas stores python stings
in the generic `object` type. Please ensure that the correct
`dtype <https://pandas.pydata.org/docs/user_guide/basics.html#dtypes>`_ is applied to the correct
column.

.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: default


    # create a pandas dataframe for training labeling the "Text" column as sting
    X_train = pd.DataFrame({"Text": pd.Series(X_train, dtype="string")})

    # create a pandas dataframe for testing labeling the "Text" column as sting
    X_test = pd.DataFrame({"Text": pd.Series(X_test, dtype="string")})








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: default


    # create an autosklearn Classifier or Regressor depending on your task at hand.
    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
    )

    automl.fit(X_train, y_train, dataset_name="20_Newsgroups")  # fit the automl model





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    AutoSklearnClassifier(ensemble_class=<class 'autosklearn.ensembles.ensemble_selection.EnsembleSelection'>,
                          per_run_time_limit=30, time_left_for_this_task=60)



.. GENERATED FROM PYTHON SOURCE LINES 67-69

View the models found by auto-sklearn
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    print(automl.leaderboard())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              rank  ensemble_weight                type      cost  duration
    model_id                                                               
    5            1             0.16                 mlp  0.048469  2.802950
    10           2             0.16  passive_aggressive  0.061224  2.615015
    12           3             0.10                 lda  0.081633  2.610240
    4            4             0.06         extra_trees  0.091837  4.257896
    2            5             0.10       random_forest  0.104592  5.452461
    7            6             0.12       random_forest  0.130102  3.856500
    3            7             0.04                 mlp  0.137755  4.863261
    6            8             0.12                 qda  0.147959  2.642199
    8            9             0.14          libsvm_svc  0.280612  2.765033




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cd49f220>,
               'cost': 0.10459183673469385,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cb5d66d0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cd49fca0>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=10, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26c7e0c070>,
               'cost': 0.1377551020408163,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26e308b160>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cf63b850>,
               'model_id': 3,
               'rank': 2,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=1.103855734598575e-05, beta_1=0.999,
                  beta_2=0.9, early_stopping=True,
                  hidden_layer_sizes=(229, 229, 229),
                  learning_rate_init=0.00014375616988222174, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cf789dc0>,
               'cost': 0.09183673469387754,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cf691070>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cf789b80>,
               'model_id': 4,
               'rank': 3,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=4, n_estimators=512,
                         n_jobs=1, random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26ca8addf0>,
               'cost': 0.04846938775510201,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cb5d69a0>,
               'ensemble_weight': 0.16,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cd562520>,
               'model_id': 5,
               'rank': 4,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.05476322473700896, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(136,),
                  learning_rate_init=0.012698439797907473, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cf6a2c10>,
               'cost': 0.14795918367346939,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cd228b80>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cd968a90>,
               'model_id': 6,
               'rank': 5,
               'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.585497512341966)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cf8f8c10>,
               'cost': 0.13010204081632648,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cfc4f520>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cf8f8dc0>,
               'model_id': 7,
               'rank': 6,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=1, min_samples_leaf=5,
                           min_samples_split=11, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cb92baf0>,
               'cost': 0.2806122448979592,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cf4d2fa0>,
               'ensemble_weight': 0.14,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cb92b8e0>,
               'model_id': 8,
               'rank': 7,
               'sklearn_classifier': SVC(C=0.20435138760822585, cache_size=1842.1692708333333,
        class_weight='balanced', gamma=7.373654384480026e-05, max_iter=-1.0,
        random_state=1, tol=4.6066870756479984e-05)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cdbae730>,
                'cost': 0.061224489795918324,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cf80dfa0>,
                'ensemble_weight': 0.16,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cdbae4f0>,
                'model_id': 10,
                'rank': 8,
                'sklearn_classifier': PassiveAggressiveClassifier(C=0.14833233294431605, average=True,
                                loss='squared_hinge', max_iter=128, random_state=1,
                                tol=0.00016482166646253793, warm_start=True)},
        12: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f26cb4a9ee0>,
                'cost': 0.08163265306122447,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f26cadbe0d0>,
                'ensemble_weight': 0.1,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f26cb4a9b50>,
                'model_id': 12,
                'rank': 9,
                'sklearn_classifier': LinearDiscriminantAnalysis(shrinkage=0.3306135150299744, solver='lsqr',
                               tol=0.0007215763283486354)}}




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score:", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy score: 0.9645120405576679





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  12.898 seconds)


.. _sphx_glr_download_examples_40_advanced_example_text_preprocessing.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_text_preprocessing.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_text_preprocessing.py <example_text_preprocessing.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_text_preprocessing.ipynb <example_text_preprocessing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
