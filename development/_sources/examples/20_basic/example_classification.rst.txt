
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/20_basic/example_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_20_basic_example_classification.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_20_basic_example_classification.py:


==============
Classification
==============

The following example shows how to fit a simple classification model with
*auto-sklearn*.

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: default

    from pprint import pprint

    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 19-21

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 28-30

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 30-38

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=120,
        per_run_time_limit=30,
        tmp_folder="/tmp/autosklearn_classification_example_tmp",
    )
    automl.fit(X_train, y_train, dataset_name="breast_cancer")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    AutoSklearnClassifier(ensemble_class=<class 'autosklearn.ensembles.ensemble_selection.EnsembleSelection'>,
                          per_run_time_limit=30, time_left_for_this_task=120,
                          tmp_folder='/tmp/autosklearn_classification_example_tmp')



.. GENERATED FROM PYTHON SOURCE LINES 39-41

View the models found by auto-sklearn
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: default


    print(automl.leaderboard())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              rank  ensemble_weight                 type      cost  duration
    model_id                                                                
    2            1             0.08        random_forest  0.028369  1.822651
    10           2             0.02        random_forest  0.028369  2.065215
    28           3             0.02        random_forest  0.028369  2.306956
    29           4             0.04        random_forest  0.028369  2.128081
    38           6             0.04  k_nearest_neighbors  0.028369  1.032510
    41           5             0.12                  mlp  0.028369  1.283795
    5            7             0.04        random_forest  0.035461  2.142809
    8            8             0.04        random_forest  0.035461  2.114441
    18           9             0.04        random_forest  0.035461  2.152020
    31          11             0.06                  mlp  0.035461  1.330959
    39          10             0.14                  mlp  0.035461  3.302831
    30          12             0.02        liblinear_svc  0.049645  4.971690
    42          13             0.02          gaussian_nb  0.049645  0.952004
    24          15             0.04        random_forest  0.070922  1.858329
    33          14             0.04                  mlp  0.070922  1.634931
    35          16             0.12        random_forest  0.134752  2.068010
    37          17             0.12         bernoulli_nb  0.375887  1.052594




.. GENERATED FROM PYTHON SOURCE LINES 45-47

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaada576a0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad8a9eb0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaada57310>,
               'model_id': 2,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad7c37f0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaae027430>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaadbd5430>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad750a00>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaadcc6ac0>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad857c70>,
               'model_id': 8,
               'rank': 3,
               'sklearn_classifier': RandomForestClassifier(max_features=2, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad5eb6a0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaadb7f3d0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad5eb220>,
                'model_id': 10,
                'rank': 4,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, min_samples_split=6,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        18: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaada59a00>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad83e0d0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad364df0>,
                'model_id': 18,
                'rank': 5,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        24: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad3576a0>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad83f970>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad330c40>,
                'model_id': 24,
                'rank': 6,
                'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=16, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        28: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad01a760>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad5df850>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaad01a460>,
                'model_id': 28,
                'rank': 7,
                'sklearn_classifier': RandomForestClassifier(max_features=17, min_samples_split=17, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        29: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaace30130>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad4cbcd0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaace89d60>,
                'model_id': 29,
                'rank': 8,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=7,
                           min_samples_leaf=2, min_samples_split=15,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        30: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaacc7fc10>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad985bb0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaacc7f910>,
                'model_id': 30,
                'rank': 9,
                'sklearn_classifier': LinearSVC(C=10.441505929697795, dual=False, intercept_scaling=1.0,
              random_state=1, tol=9.270830299189037e-05)},
        31: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac9cd310>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad1578e0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaacaa8fa0>,
                'model_id': 31,
                'rank': 10,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0022527637678329674, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(229,),
                  learning_rate_init=0.0001162349903905135, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        33: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad3301f0>,
                'cost': 0.07092198581560283,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaacf56fd0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaacf77310>,
                'model_id': 33,
                'rank': 11,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.00284827062183016, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(208, 208),
                  learning_rate_init=0.004740724430708455, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        35: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaada75400>,
                'cost': 0.13475177304964536,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaacd49520>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaada59940>,
                'model_id': 35,
                'rank': 12,
                'sklearn_classifier': RandomForestClassifier(max_features=43, min_samples_leaf=5, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        37: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaad83e2b0>,
                'cost': 0.375886524822695,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaacb87d60>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaadb94d00>,
                'model_id': 37,
                'rank': 13,
                'sklearn_classifier': BernoulliNB(alpha=1.8375704754392488)},
        38: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac306130>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaac944760>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac2f7a30>,
                'model_id': 38,
                'rank': 14,
                'sklearn_classifier': KNeighborsClassifier(n_neighbors=6)},
        39: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac2293d0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaadc15dc0>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac229190>,
                'model_id': 39,
                'rank': 15,
                'sklearn_classifier': MLPClassifier(activation='tanh', alpha=3.179679473358367e-05, beta_1=0.999,
                  beta_2=0.9, early_stopping=True, hidden_layer_sizes=(22, 22, 22),
                  learning_rate_init=0.0006107350876720548, max_iter=64,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        41: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaac0bfbb0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaad5d30d0>,
                'ensemble_weight': 0.12,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaac0bf9d0>,
                'model_id': 41,
                'rank': 16,
                'sklearn_classifier': MLPClassifier(alpha=6.917679443816052e-05, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(25,),
                  learning_rate_init=0.0013686431060211742, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        42: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fcaabf6e910>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fcaac39e0a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fcaabf6e760>,
                'model_id': 42,
                'rank': 17,
                'sklearn_classifier': GaussianNB()}}




.. GENERATED FROM PYTHON SOURCE LINES 51-53

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score:", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy score: 0.958041958041958





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  56.796 seconds)


.. _sphx_glr_download_examples_20_basic_example_classification.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/20_basic/example_classification.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_classification.py <example_classification.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_classification.ipynb <example_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
