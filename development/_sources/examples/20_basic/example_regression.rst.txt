
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/20_basic/example_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_20_basic_example_regression.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_20_basic_example_regression.py:


==========
Regression
==========

The following example shows how to fit a simple regression model with
*auto-sklearn*.

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: default

    from pprint import pprint

    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.regression
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 19-21

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: default


    X, y = sklearn.datasets.load_diabetes(return_X_y=True)

    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Build and fit a regressor
=========================

.. GENERATED FROM PYTHON SOURCE LINES 31-39

.. code-block:: default


    automl = autosklearn.regression.AutoSklearnRegressor(
        time_left_for_this_task=120,
        per_run_time_limit=30,
        tmp_folder="/tmp/autosklearn_regression_example_tmp",
    )
    automl.fit(X_train, y_train, dataset_name="diabetes")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    AutoSklearnRegressor(ensemble_class=<class 'autosklearn.ensembles.ensemble_selection.EnsembleSelection'>,
                         per_run_time_limit=30, time_left_for_this_task=120,
                         tmp_folder='/tmp/autosklearn_regression_example_tmp')



.. GENERATED FROM PYTHON SOURCE LINES 40-42

View the models found by auto-sklearn
=====================================

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default


    print(automl.leaderboard())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              rank  ensemble_weight           type      cost   duration
    model_id                                                           
    31           1             0.52  liblinear_svr  0.457671   0.720925
    30           2             0.16     libsvm_svr  0.489218   0.823797
    29           3             0.04  random_forest  0.492137  12.291510
    11           4             0.14  random_forest  0.507400  10.337472
    2            5             0.02  random_forest  0.514644   1.718183
    28           6             0.08  random_forest  0.540210   1.374032
    41           7             0.02  random_forest  0.542876   3.099168
    40           8             0.02       adaboost  0.915980   1.374105




.. GENERATED FROM PYTHON SOURCE LINES 46-48

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default


    pprint(automl.show_models(), indent=4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {   2: {   'cost': 0.5146438087462807,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aaa016e20>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9ac0e04b80>,
               'model_id': 2,
               'rank': 1,
               'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9ac0e04280>,
               'sklearn_regressor': RandomForestRegressor(max_features=1.0, n_estimators=512, n_jobs=1,
                          random_state=1, warm_start=True)},
        11: {   'cost': 0.5073997164657239,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aad97e040>,
                'ensemble_weight': 0.14,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aacc53760>,
                'model_id': 11,
                'rank': 2,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aacc53a00>,
                'sklearn_regressor': RandomForestRegressor(bootstrap=False, criterion='mae',
                          max_features=0.6277363920171745, min_samples_leaf=6,
                          min_samples_split=15, n_estimators=512, n_jobs=1,
                          random_state=1, warm_start=True)},
        28: {   'cost': 0.5402104163937974,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aad97e550>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aaa1e0d60>,
                'model_id': 28,
                'rank': 3,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aaa1e0e80>,
                'sklearn_regressor': RandomForestRegressor(bootstrap=False, criterion='friedman_mse',
                          max_features=0.7687085813023139, min_samples_leaf=16,
                          min_samples_split=16, n_estimators=512, n_jobs=1,
                          random_state=1, warm_start=True)},
        29: {   'cost': 0.492137150890837,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aad283220>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aad976a30>,
                'model_id': 29,
                'rank': 4,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aa9d2d160>,
                'sklearn_regressor': RandomForestRegressor(criterion='mae', max_features=0.7185440849559307,
                          min_samples_leaf=2, min_samples_split=6, n_estimators=512,
                          n_jobs=1, random_state=1, warm_start=True)},
        30: {   'cost': 0.4892181119587149,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aaa1c1b50>,
                'ensemble_weight': 0.16,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aaa050fa0>,
                'model_id': 30,
                'rank': 5,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aad81d580>,
                'sklearn_regressor': SVR(C=17.299726375979663, cache_size=1894.7734375, epsilon=0.007311114805941458,
        gamma=0.1, kernel='linear', shrinking=False, tol=0.01457041430420914,
        verbose=0)},
        31: {   'cost': 0.4576713949883824,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aaa2f5550>,
                'ensemble_weight': 0.52,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aa9b65700>,
                'model_id': 31,
                'rank': 6,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aa9b656a0>,
                'sklearn_regressor': LinearSVR(C=508.5787297245423, dual=False, epsilon=0.008401212435254615,
              loss='squared_epsilon_insensitive', random_state=1,
              tol=0.0019260246053997348)},
        40: {   'cost': 0.9159796370296841,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aad66ed00>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aa9c76c10>,
                'model_id': 40,
                'rank': 7,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aa9c763a0>,
                'sklearn_regressor': AdaBoostRegressor(base_estimator=DecisionTreeRegressor(max_depth=10),
                      learning_rate=0.9580713192985074, loss='square',
                      n_estimators=303, random_state=1)},
        41: {   'cost': 0.5428755642761613,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f9aa9c45700>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f9aacbfbf70>,
                'model_id': 41,
                'rank': 8,
                'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f9aacbfb220>,
                'sklearn_regressor': RandomForestRegressor(bootstrap=False, criterion='mae',
                          max_features=0.677656789361376, min_samples_split=18,
                          n_estimators=512, n_jobs=1, random_state=1,
                          warm_start=True)}}




.. GENERATED FROM PYTHON SOURCE LINES 52-58

Get the Score of the final ensemble
===================================
After training the estimator, we can now quantify the goodness of fit. One possibility for
is the `R2 score <https://scikit-learn.org/stable/modules/model_evaluation.html#r2-score>`_.
The values range between -inf and 1 with 1 being the best possible value. A dummy estimator
predicting the data mean has an R2 score of 0.

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default


    train_predictions = automl.predict(X_train)
    print("Train R2 score:", sklearn.metrics.r2_score(y_train, train_predictions))
    test_predictions = automl.predict(X_test)
    print("Test R2 score:", sklearn.metrics.r2_score(y_test, test_predictions))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Train R2 score: 0.6189821152090023
    Test R2 score: 0.38265483240872866




.. GENERATED FROM PYTHON SOURCE LINES 65-72

Plot the predictions
====================
Furthermore, we can now visually inspect the predictions. We plot the true value against the
predictions and show results on train and test data. Points on the diagonal depict perfect
predictions. Points below the diagonal were overestimated by the model (predicted value is higher
than the true value), points above the diagonal were underestimated (predicted value is lower than
the true value).

.. GENERATED FROM PYTHON SOURCE LINES 72-83

.. code-block:: default


    plt.scatter(train_predictions, y_train, label="Train samples", c="#d95f02")
    plt.scatter(test_predictions, y_test, label="Test samples", c="#7570b3")
    plt.xlabel("Predicted value")
    plt.ylabel("True value")
    plt.legend()
    plt.plot([30, 400], [30, 400], c="k", zorder=0)
    plt.xlim([30, 400])
    plt.ylim([30, 400])
    plt.tight_layout()
    plt.show()



.. image-sg:: /examples/20_basic/images/sphx_glr_example_regression_001.png
   :alt: example regression
   :srcset: /examples/20_basic/images/sphx_glr_example_regression_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  54.771 seconds)


.. _sphx_glr_download_examples_20_basic_example_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/20_basic/example_regression.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_regression.py <example_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_regression.ipynb <example_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
